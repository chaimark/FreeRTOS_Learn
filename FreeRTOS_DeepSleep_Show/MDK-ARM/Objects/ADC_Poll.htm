<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\\ADC_Poll.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\\ADC_Poll.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Apr 03 17:11:38 2025
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
check_XTClock_isOk &rArr; setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[73]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[1a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">AAA_ADD</a> from main.o(i.AAA_ADD) referenced from main.o(i.main)
 <LI><a href="#[1a]">ADC_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[28]">AES_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[31]">ATIM_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2d]">BSTIM_IRQHandler</a> from bstim.o(i.BSTIM_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2e]">COMPx_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2a]">DMA_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[40]">FL_FDET_IsActiveFlag_XTLFFail</a> from check_xthf_or_xtlf.o(i.FL_FDET_IsActiveFlag_XTLFFail) referenced from check_xthf_or_xtlf.o(i.check_XTClock_isOk)
 <LI><a href="#[33]">GPIO_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2f]">GPTIM0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[30]">GPTIM1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[23]">HFDET_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[26]">I2C_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1b]">IWDT_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1e]">LCD_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[19]">LFDET_IRQHandler</a> from check_xthf_or_xtlf.o(i.LFDET_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[29]">LPTIM_IRQHandler</a> from lptim32.o(i.LPTIM_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[34]">LPUART0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[25]">LPUART1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2c]">OPAx_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[16]">SVD_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_fm33lc0xx.o(i.SystemInit) referenced from startup_fm33lc0xx.o(.text)
 <LI><a href="#[24]">U7816_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1f]">UART0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[20]">UART1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[21]">UART4_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[22]">UART5_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[32]">VREF_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2b]">WKUP_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[15]">WWDT_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[7]">_EC20_ReBoot_In_RTC_By_1Second</a> from rtc.o(i._EC20_ReBoot_In_RTC_By_1Second) referenced 2 times from rtc.o(.data)
 <LI><a href="#[9]">_InitRTCTask</a> from rtc_settime.o(i._InitRTCTask) referenced 2 times from rtc_settime.o(.data)
 <LI><a href="#[b]">_InitSetTimeTask</a> from settime.o(i._InitSetTimeTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[d]">_LPInitSetTimeTask</a> from settime.o(i._LPInitSetTimeTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[e]">_LPSetCloseTask</a> from settime.o(i._LPSetCloseTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[a]">_RTCCloseTask</a> from rtc_settime.o(i._RTCCloseTask) referenced 2 times from rtc_settime.o(.data)
 <LI><a href="#[8]">_RTC_ReBoot_Check</a> from rtc.o(i._RTC_ReBoot_Check) referenced 2 times from rtc.o(.data)
 <LI><a href="#[c]">_SetCloseTask</a> from settime.o(i._SetCloseTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[44]">__main</a> from __main.o(!!!main) referenced from startup_fm33lc0xx.o(.text)
 <LI><a href="#[3f]">_getStrlen</a> from strlib.o(i._getStrlen) referenced from strlib.o(i._strnewInit)
 <LI><a href="#[3d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[37]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[3e]">check_XTClock_isOk</a> from check_xthf_or_xtlf.o(i.check_XTClock_isOk) referenced from check_xthf_or_xtlf.o(i.LFDET_IRQHandler)
 <LI><a href="#[3e]">check_XTClock_isOk</a> from check_xthf_or_xtlf.o(i.check_XTClock_isOk) referenced from check_xthf_or_xtlf.o(i.check_XTClock_isOk)
 <LI><a href="#[3c]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[43]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[42]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[47]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[60]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[48]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[49]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[51]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4b]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4d]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[56]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[46]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[101]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[50]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[102]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[52]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AT24CXXLoader_Init &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[75]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[55]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[104]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[57]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[dd]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b2]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>COMPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPTIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>HFDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>OPAx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>U7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>VREF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
</UL>

<P><STRONG><a name="[106]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
</UL>

<P><STRONG><a name="[107]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrUserTime
</UL>

<P><STRONG><a name="[69]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4a]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[108]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[61]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
</UL>

<P><STRONG><a name="[63]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[b8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getStrlen
</UL>

<P><STRONG><a name="[66]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[65]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[109]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Date_ByHEX
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
</UL>

<P><STRONG><a name="[10d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[37]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[62]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[3c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>__vfscanf</STRONG> (Thumb, 900 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[110]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[111]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6c]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[54]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e0]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[58]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[112]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>AAA_ADD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.AAA_ADD))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[76]"></a>AT24CXXLoader_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, at24cxxdataloader.o(i.AT24CXXLoader_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AT24CXXLoader_Init &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bstim.o(i.BSTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSTIM_IRQHandler &rArr; CountSetTimeTask
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>CheckMeterNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, define.o(i.CheckMeterNum))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Check_Date_ByHEX</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, rtc.o(i.Check_Date_ByHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>

<P><STRONG><a name="[bc]"></a>Check_Time_ByHEX</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, rtc.o(i.Check_Time_ByHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Time_ByHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>

<P><STRONG><a name="[7b]"></a>Config_Init_XTHF_And_XTLF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.Config_Init_XTHF_And_XTLF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Config_Init_XTHF_And_XTLF &rArr; XTLF_Config_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[ac]"></a>CountRTCTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rtc_settime.o(i.CountRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountRTCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>CountSetTimeTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, settime.o(i.CountSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountSetTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>Device_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, define.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>EEprom_AT24C0XXData_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_AT24C0XXData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EEprom_AT24C0XXData_Read &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeModeForT
</UL>

<P><STRONG><a name="[7f]"></a>EEprom_AT24C0XXData_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_AT24C0XXData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = EEprom_AT24C0XXData_Write &rArr; EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
</UL>

<P><STRONG><a name="[81]"></a>EEprom_AT24CXX_Parameter_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_AT24CXX_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EEprom_AT24CXX_Parameter_Init &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>EEprom_Byte1Read</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>

<P><STRONG><a name="[84]"></a>EEprom_Byte1Read_No_Check</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Read_No_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>

<P><STRONG><a name="[83]"></a>EEprom_Byte1Write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>

<P><STRONG><a name="[8d]"></a>EEprom_Byte1Write_No_Check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Write_No_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EEprom_Byte1Write_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
</UL>

<P><STRONG><a name="[7e]"></a>EEprom_Read_Start</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_Read_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Read
</UL>

<P><STRONG><a name="[80]"></a>EEprom_Write_Start</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, at24c02.o(i.EEprom_Write_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
</UL>

<P><STRONG><a name="[9a]"></a>FL_DelayInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33lc0xx_fl.o(i.FL_DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[8c]"></a>FL_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[88]"></a>FL_DelayUs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[90]"></a>FL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinRemap
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinPullup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinOpenDrain
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinInput
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinAnalogSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
</UL>

<P><STRONG><a name="[99]"></a>FL_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>FL_NVIC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fm33lc0xx_fl.o(i.FL_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQ_Second
</UL>

<P><STRONG><a name="[9e]"></a>FL_RTC_ConfigTime</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_ConfigTime))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[aa]"></a>FL_RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>

<P><STRONG><a name="[9d]"></a>FL_RTC_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>

<P><STRONG><a name="[87]"></a>IIC_Check_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Check_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Check_Ack &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[89]"></a>IIC_RevByte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at24c02.o(i.IIC_RevByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_RevByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[86]"></a>IIC_SendByte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, at24c02.o(i.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[8a]"></a>IIC_SendNoAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at24c02.o(i.IIC_SendNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_SendNoAck &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[85]"></a>IIC_Start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Start &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[8b]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_Stop &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[19]"></a>LFDET_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.LFDET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LFDET_IRQHandler &rArr; MF_RTC_1S_Init &rArr; RTC_IRQ_Second &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetLSCLKClockSource
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FDET_DisableIT_XTLFFail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>LPCountSetTimeTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, settime.o(i.LPCountSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPCountSetTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lptim32.o(i.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTIM_IRQHandler &rArr; LPCountSetTimeTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPCountSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>MF_Clock_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mf_config.o(i.MF_Clock_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>MF_Config_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mf_config.o(i.MF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MF_Config_Init &rArr; MF_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>MF_GPIO_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mf_config.o(i.MF_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[a2]"></a>MF_RTC_1S_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtc.o(i.MF_RTC_1S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MF_RTC_1S_Init &rArr; RTC_IRQ_Second &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQ_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[a7]"></a>New_Str_Obj</STRONG> (Thumb, 42 bytes, Stack size 36 bytes, strlib.o(i.New_Str_Obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = New_Str_Obj
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RTC_IRQHandler &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeModeForT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRTCTask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>RTC_IRQ_Second</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQ_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_IRQ_Second &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>

<P><STRONG><a name="[ae]"></a>RTC_SetRTC</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtc.o(i.RTC_SetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_SetRTC &rArr; checkTimeFrom &rArr; Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_ConfigTime
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>StartOPenDevMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, define.o(i.StartOPenDevMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StartOPenDevMode &rArr; Device_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>XTLF_Config_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.XTLF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XTLF_Config_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
</UL>

<P><STRONG><a name="[7]"></a>_EC20_ReBoot_In_RTC_By_1Second</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc.o(i._EC20_ReBoot_In_RTC_By_1Second))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_RTC_ReBoot_Check</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtc.o(i._RTC_ReBoot_Check))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>

<P><STRONG><a name="[3f]"></a>_getStrlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strlib.o(i._getStrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _getStrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strlib.o(i._strnewInit)
</UL>
<P><STRONG><a name="[5f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a8]"></a>_strnewInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strlib.o(i._strnewInit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
</UL>

<P><STRONG><a name="[b9]"></a>anyBaseToAnyBase</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, numberbaselib.o(i.anyBaseToAnyBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
</UL>

<P><STRONG><a name="[ad]"></a>changeModeForT</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, at24c02.o(i.changeModeForT))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = changeModeForT &rArr; EEprom_AT24C0XXData_Read &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>checkTimeFrom</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, at24cxxdataloader.o(i.checkTimeFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = checkTimeFrom &rArr; Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Time_ByHEX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Date_ByHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[77]"></a>getDayOfWeek</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, rtc.o(i.getDayOfWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLoader_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>getStrNowDataAndTimeByRTC</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rtc.o(i.getStrNowDataAndTimeByRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = getStrNowDataAndTimeByRTC &rArr; getStrUserTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_GetTime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrUserTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[c1]"></a>getStrUserTime</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, rtc.o(i.getStrUserTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = getStrUserTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
</UL>

<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; AT24CXXLoader_Init &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMeterNum
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLoader_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d8]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[d6]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[bf]"></a>setRtcDate</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, rtc.o(i.setRtcDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[cf]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[d7]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[d5]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[c9]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c7]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ca]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[d1]"></a>vPortFree</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[cb]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c5]"></a>vTaskStartScheduler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[59]"></a>vTaskSwitchContext</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[db]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[c3]"></a>xQueueGenericCreate</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[c4]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[de]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[ce]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d9]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[da]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[dc]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[42]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[d2]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[c6]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[cc]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[d0]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[43]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[d4]"></a>prvInitialiseNewTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[c8]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[df]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[9c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[96]"></a>FL_GPIO_DisablePinAnalogSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinAnalogSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[93]"></a>FL_GPIO_DisablePinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinInput))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[95]"></a>FL_GPIO_DisablePinOpenDrain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinOpenDrain))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[94]"></a>FL_GPIO_DisablePinPullup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinPullup))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[97]"></a>FL_GPIO_DisablePinRemap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinRemap))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[98]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[b7]"></a>SystemPLLClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemPLLClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[a0]"></a>FL_FDET_DisableIT_XTLFFail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_FDET_DisableIT_XTLFFail))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[40]"></a>FL_FDET_IsActiveFlag_XTLFFail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_FDET_IsActiveFlag_XTLFFail))
<BR>[Address Reference Count : 1]<UL><LI> check_xthf_or_xtlf.o(i.check_XTClock_isOk)
</UL>
<P><STRONG><a name="[a1]"></a>FL_RCC_SetLSCLKClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_RCC_SetLSCLKClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[3e]"></a>check_XTClock_isOk</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, check_xthf_or_xtlf.o(i.check_XTClock_isOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = check_XTClock_isOk &rArr; setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetLSCLKClockSource
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FDET_DisableIT_XTLFFail
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> check_xthf_or_xtlf.o(i.LFDET_IRQHandler)
<LI> check_xthf_or_xtlf.o(i.check_XTClock_isOk)
</UL>
<P><STRONG><a name="[a9]"></a>RTC_GetRTC</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, rtc.o(i.RTC_GetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_GetRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_GetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>_InitRTCTask</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, rtc_settime.o(i._InitRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _InitRTCTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_settime.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_RTCCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc_settime.o(i._RTCCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RTCCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_settime.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_InitSetTimeTask</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, settime.o(i._InitSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _InitSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_LPInitSetTimeTask</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, settime.o(i._LPInitSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _LPInitSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_LPSetCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, settime.o(i._LPSetCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LPSetCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_SetCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, settime.o(i._SetCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>EEprom_SDA_SET_IN</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_SDA_SET_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEprom_SDA_SET_IN &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[91]"></a>EEprom_SDA_SET_OUT</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_SDA_SET_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[9f]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c02.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[92]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c02.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5c]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6d]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[6f]"></a>_scanf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[70]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[71]"></a>_scanf_wctomb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[6e]"></a>_scanf_wstring</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
