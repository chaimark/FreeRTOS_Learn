<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\\FreeRTOS_DeepSleep.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\\FreeRTOS_DeepSleep.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Apr 17 00:45:06 2025
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LPUart_0_And_1_Receive &rArr; HY_USB_TTL_CheckBuff &rArr; DoingCmdSub &rArr; WeiteCmdSubData &rArr; RTC_SetRTC &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[1a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[164]">quicksort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[164]">quicksort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[28]">AES_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[31]">ATIM_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2d]">BSTIM_IRQHandler</a> from bstim.o(i.BSTIM_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2e]">COMPx_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2a]">DMA_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[45]">FL_FDET_IsActiveFlag_XTLFFail</a> from check_xthf_or_xtlf.o(i.FL_FDET_IsActiveFlag_XTLFFail) referenced from check_xthf_or_xtlf.o(i.check_XTClock_isOk)
 <LI><a href="#[4c]">FL_GPIO_SetExtiLine0</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine0) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[4d]">FL_GPIO_SetExtiLine1</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine1) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[56]">FL_GPIO_SetExtiLine10</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine10) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[57]">FL_GPIO_SetExtiLine11</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine11) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[58]">FL_GPIO_SetExtiLine12</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine12) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[59]">FL_GPIO_SetExtiLine13</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine13) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[5a]">FL_GPIO_SetExtiLine14</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine14) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[4e]">FL_GPIO_SetExtiLine2</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine2) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[4f]">FL_GPIO_SetExtiLine3</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine3) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[50]">FL_GPIO_SetExtiLine4</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine4) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[51]">FL_GPIO_SetExtiLine5</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine5) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[52]">FL_GPIO_SetExtiLine6</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine6) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[53]">FL_GPIO_SetExtiLine7</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine7) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[54]">FL_GPIO_SetExtiLine8</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine8) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[55]">FL_GPIO_SetExtiLine9</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine9) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[5b]">FL_GPIO_SetTriggerEdge</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetTriggerEdge) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[33]">GPIO_IRQHandler</a> from gpio_interrupt.o(i.GPIO_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2f]">GPTIM0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[30]">GPTIM1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[23]">HFDET_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[26]">I2C_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1b]">IWDT_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1e]">LCD_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[19]">LFDET_IRQHandler</a> from check_xthf_or_xtlf.o(i.LFDET_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[29]">LPTIM_IRQHandler</a> from lptim32.o(i.LPTIM_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[34]">LPUART0_IRQHandler</a> from lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[3f]">LPUART0_ReadData_Deal</a> from lpuart_0_and_1_lib.o(i.LPUART0_ReadData_Deal) referenced from lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler)
 <LI><a href="#[25]">LPUART1_IRQHandler</a> from lpuart_0_and_1_lib.o(i.LPUART1_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[40]">LPUART1_ReadData_Deal</a> from lpuart_0_and_1_lib.o(i.LPUART1_ReadData_Deal) referenced from lpuart_0_and_1_lib.o(i.LPUART1_IRQHandler)
 <LI><a href="#[46]">LPUart_0_And_1_Receive</a> from tasklpuart_0_and_1.o(i.LPUart_0_And_1_Receive) referenced from main.o(i.main)
 <LI><a href="#[10]">NMI_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2c]">OPAx_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[47]">ReadEEprom</a> from taskreadeeprom.o(i.ReadEEprom) referenced from main.o(i.main)
 <LI><a href="#[41]">ReadEEpromTimerCallback</a> from taskreadeeprom.o(i.ReadEEpromTimerCallback) referenced from taskreadeeprom.o(i.ReadEEprom)
 <LI><a href="#[f]">Reset_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[16]">SVD_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_fm33lc0xx.o(i.SystemInit) referenced from startup_fm33lc0xx.o(.text)
 <LI><a href="#[48]">TimeTask</a> from taskabouttimer.o(i.TimeTask) referenced from main.o(i.main)
 <LI><a href="#[24]">U7816_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1f]">UART0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[20]">UART1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[21]">UART4_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[22]">UART5_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[32]">VREF_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[42]">VoltgeTestTimer</a> from taskabouttimer.o(i.VoltgeTestTimer) referenced from taskabouttimer.o(i.TimeTask)
 <LI><a href="#[2b]">WKUP_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[15]">WWDT_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[d]">_EC20_ReBoot_In_RTC_By_1Second</a> from rtc.o(i._EC20_ReBoot_In_RTC_By_1Second) referenced 2 times from rtc.o(.data)
 <LI><a href="#[7]">_InitRTCTask</a> from rtc_settime.o(i._InitRTCTask) referenced 2 times from rtc_settime.o(.data)
 <LI><a href="#[9]">_InitSetTimeTask</a> from settime.o(i._InitSetTimeTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[b]">_LPInitSetTimeTask</a> from settime.o(i._LPInitSetTimeTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[c]">_LPSetCloseTask</a> from settime.o(i._LPSetCloseTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[8]">_RTCCloseTask</a> from rtc_settime.o(i._RTCCloseTask) referenced 2 times from rtc_settime.o(.data)
 <LI><a href="#[e]">_RTC_ReBoot_Check</a> from rtc.o(i._RTC_ReBoot_Check) referenced 2 times from rtc.o(.data)
 <LI><a href="#[a]">_SetCloseTask</a> from settime.o(i._SetCloseTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_fm33lc0xx.o(.text)
 <LI><a href="#[44]">_getStrlen</a> from strlib.o(i._getStrlen) referenced from strlib.o(i._strnewInit)
 <LI><a href="#[3d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[37]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[3e]">check_XTClock_isOk</a> from check_xthf_or_xtlf.o(i.check_XTClock_isOk) referenced from check_xthf_or_xtlf.o(i.LFDET_IRQHandler)
 <LI><a href="#[3e]">check_XTClock_isOk</a> from check_xthf_or_xtlf.o(i.check_XTClock_isOk) referenced from check_xthf_or_xtlf.o(i.check_XTClock_isOk)
 <LI><a href="#[3c]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[49]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[4b]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[43]">startTimeTask</a> from taskabouttimer.o(i.startTimeTask) referenced from taskabouttimer.o(i.TimeTask)
 <LI><a href="#[43]">startTimeTask</a> from taskabouttimer.o(i.startTimeTask) referenced from taskabouttimer.o(i.startTimeTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[78]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[60]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[61]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[69]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[63]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[65]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[6e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1cd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[66]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; StartOPenDevMode &rArr; ReadTime_EEprom &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1a1]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[155]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[157]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>COMPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPTIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>HFDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>OPAx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>U7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>VREF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
</UL>

<P><STRONG><a name="[1d4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
</UL>

<P><STRONG><a name="[1d5]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
</UL>

<P><STRONG><a name="[1d6]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrUserTime
</UL>

<P><STRONG><a name="[8e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[62]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[79]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
</UL>

<P><STRONG><a name="[7b]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getStrlen
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[7f]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart1_RxBuffer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart0_RxBuffer
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Date_ByHEX
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEpromTimerCallback
</UL>

<P><STRONG><a name="[1dd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
</UL>

<P><STRONG><a name="[1e0]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[83]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[86]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[1e2]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
</UL>

<P><STRONG><a name="[1e3]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
</UL>

<P><STRONG><a name="[1e4]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffToFloatOrDouble
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[1e5]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[1e6]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
</UL>

<P><STRONG><a name="[1e7]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[73]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[37]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[7a]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[94]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[64]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[3c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[92]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[93]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[95]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1e8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[96]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[6c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a8]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[9c]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[70]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ea]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>AT24CXXLoader_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, at24cxxdataloader.o(i.AT24CXXLoader_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AT24CXXLoader_Init &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Add_HY_DataClass</STRONG> (Thumb, 914 bytes, Stack size 88 bytes, define.o(i.Add_HY_DataClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Add_HY_DataClass &rArr; DoubleOrFloatToBuff &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[a8]"></a>BSTIM32_Setup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bstim.o(i.BSTIM32_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBSTime
</UL>

<P><STRONG><a name="[c0]"></a>BSTIM32_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bstim.o(i.BSTIM32_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[2d]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bstim.o(i.BSTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSTIM_IRQHandler &rArr; CountSetTimeTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>Battary_GND_OFF</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, adc.o(i.Battary_GND_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Battary_GND_OFF &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[b0]"></a>Battary_GND_ON</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(i.Battary_GND_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Battary_GND_ON &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[b2]"></a>BuffToFloatOrDouble</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, numberbaselib.o(i.BuffToFloatOrDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BuffToFloatOrDouble &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
</UL>

<P><STRONG><a name="[116]"></a>Cault_CS</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, define.o(i.Cault_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cault_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[b4]"></a>CheckMeterNum</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, define.o(i.CheckMeterNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckMeterNum &rArr; EEprom_AT24C0XXData_Write &rArr; EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>Check_Date_ByHEX</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, rtc.o(i.Check_Date_ByHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>

<P><STRONG><a name="[16e]"></a>Check_Time_ByHEX</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, rtc.o(i.Check_Time_ByHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Time_ByHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>

<P><STRONG><a name="[b8]"></a>Clr_LPUart0_RxBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.Clr_LPUart0_RxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clr_LPUart0_RxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>Clr_LPUart1_RxBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.Clr_LPUart1_RxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clr_LPUart1_RxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>Config_Init_XTHF_And_XTLF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.Config_Init_XTHF_And_XTLF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Config_Init_XTHF_And_XTLF &rArr; XTLF_Config_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[146]"></a>CountRTCTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rtc_settime.o(i.CountRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountRTCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>CountSetTimeTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, settime.o(i.CountSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountSetTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>CtrlCmdSubData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, define.o(i.CtrlCmdSubData))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
</UL>

<P><STRONG><a name="[bc]"></a>Device_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, define.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Device_Init &rArr; LPUART_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM250mS_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[c1]"></a>DoingCmdSub</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, define.o(i.DoingCmdSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DoingCmdSub &rArr; WeiteCmdSubData &rArr; RTC_SetRTC &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCmdSubData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlCmdSubData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[a7]"></a>DoubleOrFloatToBuff</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, numberbaselib.o(i.DoubleOrFloatToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DoubleOrFloatToBuff &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[b5]"></a>EEprom_AT24C0XXData_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_AT24C0XXData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EEprom_AT24C0XXData_Write &rArr; EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMeterNum
</UL>

<P><STRONG><a name="[c8]"></a>EEprom_AT24CXX_Parameter_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_AT24CXX_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EEprom_AT24CXX_Parameter_Init &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>EEprom_Byte1Read</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>

<P><STRONG><a name="[cb]"></a>EEprom_Byte1Read_No_Check</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Read_No_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>

<P><STRONG><a name="[ca]"></a>EEprom_Byte1Write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>

<P><STRONG><a name="[d4]"></a>EEprom_Byte1Write_No_Check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Write_No_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEprom_Byte1Write_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
</UL>

<P><STRONG><a name="[d5]"></a>EEprom_Read_Start</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_Read_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime_EEprom
</UL>

<P><STRONG><a name="[c7]"></a>EEprom_Write_Start</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, at24c02.o(i.EEprom_Write_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
</UL>

<P><STRONG><a name="[130]"></a>FL_ADC_CommonInit</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, fm33lc0xx_fl_adc.o(i.FL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
</UL>

<P><STRONG><a name="[132]"></a>FL_ADC_Init</STRONG> (Thumb, 884 bytes, Stack size 16 bytes, fm33lc0xx_fl_adc.o(i.FL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
</UL>

<P><STRONG><a name="[133]"></a>FL_BSTIM32_Init</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, fm33lc0xx_fl_bstim32.o(i.FL_BSTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_BSTIM32_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
</UL>

<P><STRONG><a name="[e5]"></a>FL_DelayInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33lc0xx_fl.o(i.FL_DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[d3]"></a>FL_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
</UL>

<P><STRONG><a name="[cf]"></a>FL_DelayUs</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, publiclib_no_one.o(i.FL_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
</UL>

<P><STRONG><a name="[139]"></a>FL_EXTI_CommonInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_EXTI_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Init
</UL>

<P><STRONG><a name="[db]"></a>FL_EXTI_Init</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, fm33lc0xx_fl_exti.o(i.FL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisableDigitalFilter
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ClearFlag_EXTI
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
</UL>

<P><STRONG><a name="[ae]"></a>FL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinRemap
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinPullup
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinOpenDrain
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinInput
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinAnalogSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RCC_XTLF_IO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
</UL>

<P><STRONG><a name="[13e]"></a>FL_IWDT_Init</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, fm33lc0xx_fl_iwdt.o(i.FL_IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FL_IWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_IWDT_Init
</UL>

<P><STRONG><a name="[e4]"></a>FL_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>FL_LPTIM32_Init</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, fm33lc0xx_fl_lptim32.o(i.FL_LPTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_LPTIM32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetETRTriggerEdge
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetETRCountEdge
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_EnableETRFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM250mS_Init
</UL>

<P><STRONG><a name="[ea]"></a>FL_LPUART_Init</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, fm33lc0xx_fl_lpuart.o(i.FL_LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_LPUART_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_RCMF_Enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup3BusClock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup1OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[ee]"></a>FL_NVIC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fm33lc0xx_fl.o(i.FL_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM250mS_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQ_Second
</UL>

<P><STRONG><a name="[142]"></a>FL_PMU_Sleep_Init</STRONG> (Thumb, 308 bytes, Stack size 12 bytes, fm33lc0xx_fl_pmu.o(i.FL_PMU_Sleep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_PMU_Sleep_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
</UL>

<P><STRONG><a name="[f1]"></a>FL_RTC_ConfigTime</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_ConfigTime))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[145]"></a>FL_RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>

<P><STRONG><a name="[f0]"></a>FL_RTC_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>

<P><STRONG><a name="[f2]"></a>GP21_GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, gp21.o(i.GP21_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GP21_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[f5]"></a>GP21_Get_Data32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gp21.o(i.GP21_Get_Data32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GP21_Get_Data32 &rArr; GP21_Read_Reg32
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[f7]"></a>GP21_Goto_Low_Pwr</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gp21.o(i.GP21_Goto_Low_Pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GP21_Goto_Low_Pwr
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[f8]"></a>GP21_Goto_Realy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gp21.o(i.GP21_Goto_Realy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GP21_Goto_Realy &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[fb]"></a>GP21_Read_Reg16</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gp21.o(i.GP21_Read_Reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GP21_Read_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Status
</UL>

<P><STRONG><a name="[f6]"></a>GP21_Read_Reg32</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gp21.o(i.GP21_Read_Reg32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GP21_Read_Reg32
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Get_Data32
</UL>

<P><STRONG><a name="[fc]"></a>GP21_Read_Status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp21.o(i.GP21_Read_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GP21_Read_Status &rArr; GP21_Read_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[f9]"></a>GP21_Reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gp21.o(i.GP21_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GP21_Reset &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
</UL>

<P><STRONG><a name="[fe]"></a>GP21_SPI_Register</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gp21.o(i.GP21_SPI_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GP21_SPI_Register &rArr; GP21_Write_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
</UL>

<P><STRONG><a name="[fa]"></a>GP21_Spi_Init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, gp21.o(i.GP21_Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GP21_Spi_Init &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg_DelayTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_SPI_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
</UL>

<P><STRONG><a name="[fd]"></a>GP21_Write_Reg16</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gp21.o(i.GP21_Write_Reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GP21_Write_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg_DelayTime
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_SPI_Register
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
</UL>

<P><STRONG><a name="[ff]"></a>GP21_Write_Reg_DelayTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp21.o(i.GP21_Write_Reg_DelayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GP21_Write_Reg_DelayTime &rArr; GP21_Write_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
</UL>

<P><STRONG><a name="[33]"></a>GPIO_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio_interrupt.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_IRQHandler &rArr; SX1276_Interupt &rArr; SX1276_RF_RECEIVE &rArr; SX1276LoRaSetOpMode &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Interupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>GetBatVoltage</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, adc.o(i.GetBatVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetBatVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Disable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_EnableADCMonitor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_DisableADCMonitor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[111]"></a>GetPressVoltage</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, adc.o(i.GetPressVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetPressVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Disable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_EnableADCMonitor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_DisableADCMonitor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
</UL>

<P><STRONG><a name="[10d]"></a>GetSingleChannelVoltage_POLL</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, adc.o(i.GetSingleChannelVoltage_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[115]"></a>HY_USB_TTL_CheckBuff</STRONG> (Thumb, 1000 bytes, Stack size 248 bytes, define.o(i.HY_USB_TTL_CheckBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HY_USB_TTL_CheckBuff &rArr; DoingCmdSub &rArr; WeiteCmdSubData &rArr; RTC_SetRTC &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cault_CS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CheckSum
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[ce]"></a>IIC_Check_Ack</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Check_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Check_Ack &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[d0]"></a>IIC_RevByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at24c02.o(i.IIC_RevByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_RevByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_IN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[cd]"></a>IIC_SendByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at24c02.o(i.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[d1]"></a>IIC_SendNoAck</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, at24c02.o(i.IIC_SendNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_SendNoAck &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[cc]"></a>IIC_Start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Start &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[d2]"></a>IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Stop &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[19]"></a>LFDET_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.LFDET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LFDET_IRQHandler &rArr; MF_RTC_1S_Init &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetLSCLKClockSource
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FDET_DisableIT_XTLFFail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>LPCountSetTimeTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, settime.o(i.LPCountSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPCountSetTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lptim32.o(i.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTIM_IRQHandler &rArr; LPCountSetTimeTask
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPCountSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPUART0_IRQHandler &rArr; OpenBSTime &rArr; BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBSTime
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_LPUART0_RX_Data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart0_RxBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsEnabledIT_RXBuffFull
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_RXBuffFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPUART0_ReadData_Deal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.LPUART0_ReadData_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPUART0_ReadData_Deal &rArr; LPUart0CheckBuff &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart0CheckBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler)
</UL>
<P><STRONG><a name="[122]"></a>LPUART0_Send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpuart_0_and_1_lib.o(i.LPUART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART0_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_WriteTXBuff
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_TXShiftBuffEmpty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_TXBuffEmpty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_TXShiftBuffEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[25]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPUART1_IRQHandler &rArr; OpenBSTime &rArr; BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBSTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_LPUART1_RX_Data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart1_RxBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsEnabledIT_RXBuffFull
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_RXBuffFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPUART1_ReadData_Deal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.LPUART1_ReadData_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPUART1_ReadData_Deal &rArr; LPUart1CheckBuff &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart1CheckBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpuart_0_and_1_lib.o(i.LPUART1_IRQHandler)
</UL>
<P><STRONG><a name="[129]"></a>LPUART1_Send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpuart_0_and_1_lib.o(i.LPUART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_WriteTXBuff
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_TXShiftBuffEmpty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_TXBuffEmpty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_TXShiftBuffEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[bd]"></a>LPUART_Init</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, lpuart_0_and_1_lib.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LPUART_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[121]"></a>LPUart0CheckBuff</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tasklpuart_0_and_1.o(i.LPUart0CheckBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPUart0CheckBuff &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_ReadData_Deal
</UL>

<P><STRONG><a name="[128]"></a>LPUart1CheckBuff</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tasklpuart_0_and_1.o(i.LPUart1CheckBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPUart1CheckBuff &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_ReadData_Deal
</UL>

<P><STRONG><a name="[46]"></a>LPUart_0_And_1_Receive</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, tasklpuart_0_and_1.o(i.LPUart_0_And_1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = LPUart_0_And_1_Receive &rArr; HY_USB_TTL_CheckBuff &rArr; DoingCmdSub &rArr; WeiteCmdSubData &rArr; RTC_SetRTC &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_Send
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart1_RxBuffer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart0_RxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[12f]"></a>MF_ADC_Common_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adc.o(i.MF_ADC_Common_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MF_ADC_Common_Init &rArr; FL_ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[131]"></a>MF_ADC_Sampling_Init</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, adc.o(i.MF_ADC_Sampling_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MF_ADC_Sampling_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[a9]"></a>MF_BSTIM32_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bstim.o(i.MF_BSTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM32_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>

<P><STRONG><a name="[134]"></a>MF_Clock_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, mf_config.o(i.MF_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MF_Clock_Init &rArr; MF_RCC_XTLF_IO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RCC_XTLF_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>MF_Config_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mf_config.o(i.MF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MF_Config_Init &rArr; MF_ADC_Sampling_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>MF_EXTI_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mf_config.o(i.MF_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MF_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
</UL>

<P><STRONG><a name="[13a]"></a>MF_EXTI_Line_Init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, mf_config.o(i.MF_EXTI_Line_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MF_EXTI_Line_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[13b]"></a>MF_GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mf_config.o(i.MF_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>MF_IWDT_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mf_config.o(i.MF_IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MF_IWDT_Init &rArr; FL_IWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_IWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[bf]"></a>MF_LPTIM250mS_Init</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lptim32.o(i.MF_LPTIM250mS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MF_LPTIM250mS_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[13f]"></a>MF_LPUART0_Interrupt_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.MF_LPUART0_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MF_LPUART0_Interrupt_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableIT_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[141]"></a>MF_LPUART1_Interrupt_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.MF_LPUART1_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MF_LPUART1_Interrupt_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableIT_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[137]"></a>MF_PMU_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mf_config.o(i.MF_PMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MF_PMU_Init &rArr; FL_PMU_Sleep_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[135]"></a>MF_RCC_XTLF_IO_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mf_config.o(i.MF_RCC_XTLF_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_RCC_XTLF_IO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[be]"></a>MF_RTC_1S_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(i.MF_RTC_1S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MF_RTC_1S_Init &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQ_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[a6]"></a>New_Str_Obj</STRONG> (Thumb, 42 bytes, Stack size 36 bytes, strlib.o(i.New_Str_Obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = New_Str_Obj
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[11f]"></a>OpenBSTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tasklpuart_0_and_1.o(i.OpenBSTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OpenBSTime &rArr; BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>RECEIVE_DATA</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, sx1276_receive.o(i.RECEIVE_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Interupt
</UL>

<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RTC_IRQHandler &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountRTCTask
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>RTC_IRQ_Second</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQ_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_IRQ_Second &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>

<P><STRONG><a name="[147]"></a>RTC_SetRTC</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtc.o(i.RTC_SetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_SetRTC &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[47]"></a>ReadEEprom</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, taskreadeeprom.o(i.ReadEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ReadEEprom &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[41]"></a>ReadEEpromTimerCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, taskreadeeprom.o(i.ReadEEpromTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadEEpromTimerCallback &rArr; startReadEEprom &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startReadEEprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskreadeeprom.o(i.ReadEEprom)
</UL>
<P><STRONG><a name="[14e]"></a>ReadTime_EEprom</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at24c02.o(i.ReadTime_EEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadTime_EEprom &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[c4]"></a>ResCmdSubData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, define.o(i.ResCmdSubData))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>SX1276LoRaSetOpMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1276.o(i.SX1276LoRaSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetOpMode &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_RF_RECEIVE
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Interupt
</UL>

<P><STRONG><a name="[150]"></a>SX1276ReadBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Interupt
</UL>

<P><STRONG><a name="[151]"></a>SX1276WriteBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_RF_RECEIVE
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Interupt
</UL>

<P><STRONG><a name="[100]"></a>SX1276_Interupt</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, sx1276.o(i.SX1276_Interupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276_Interupt &rArr; SX1276_RF_RECEIVE &rArr; SX1276LoRaSetOpMode &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RECEIVE_DATA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_RF_RECEIVE
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>SX1276_RF_RECEIVE</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1276.o(i.SX1276_RF_RECEIVE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276_RF_RECEIVE &rArr; SX1276LoRaSetOpMode &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Interupt
</UL>

<P><STRONG><a name="[120]"></a>Save_LPUART0_RX_Data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.Save_LPUART0_RX_Data))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>Save_LPUART1_RX_Data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.Save_LPUART1_RX_Data))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>StartOPenDevMode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, define.o(i.StartOPenDevMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = StartOPenDevMode &rArr; ReadTime_EEprom &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_IWDT_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART1_Interrupt_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime_EEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>TEMP_CAL</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, pt1000.o(i.TEMP_CAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TEMP_CAL &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[15d]"></a>TEST_GP21_Temp</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, pt1000.o(i.TEST_GP21_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TEST_GP21_Temp &rArr; GP21_Read_Status &rArr; GP21_Read_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Status
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Get_Data32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[160]"></a>TEST_Press</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, adc.o(i.TEST_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TEST_Press &rArr; GetPressVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[161]"></a>TEST_Temperature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(i.TEST_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TEST_Temperature &rArr; Test_PT1000 &rArr; TEMP_CAL &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[163]"></a>Test_BatVoltge</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(i.Test_BatVoltge))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_BatVoltge &rArr; GetBatVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[162]"></a>Test_PT1000</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, pt1000.o(i.Test_PT1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Test_PT1000 &rArr; TEMP_CAL &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quicksort
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Low_Pwr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Temperature
</UL>

<P><STRONG><a name="[48]"></a>TimeTask</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, taskabouttimer.o(i.TimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TimeTask &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Temperature
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[42]"></a>VoltgeTestTimer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, taskabouttimer.o(i.VoltgeTestTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VoltgeTestTimer &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskabouttimer.o(i.TimeTask)
</UL>
<P><STRONG><a name="[c2]"></a>WeiteCmdSubData</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, define.o(i.WeiteCmdSubData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WeiteCmdSubData &rArr; RTC_SetRTC &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffToFloatOrDouble
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
</UL>

<P><STRONG><a name="[bb]"></a>XTLF_Config_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.XTLF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XTLF_Config_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
</UL>

<P><STRONG><a name="[d]"></a>_EC20_ReBoot_In_RTC_By_1Second</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc.o(i._EC20_ReBoot_In_RTC_By_1Second))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_RTC_ReBoot_Check</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtc.o(i._RTC_ReBoot_Check))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[113]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, adc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
</UL>

<P><STRONG><a name="[a4]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[44]"></a>_getStrlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strlib.o(i._getStrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _getStrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strlib.o(i._strnewInit)
</UL>
<P><STRONG><a name="[77]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[117]"></a>_strnewInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strlib.o(i._strnewInit))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[16d]"></a>anyBaseToAnyBase</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, numberbaselib.o(i.anyBaseToAnyBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
</UL>

<P><STRONG><a name="[148]"></a>checkTimeFrom</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, at24cxxdataloader.o(i.checkTimeFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = checkTimeFrom &rArr; Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Time_ByHEX
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Date_ByHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[a2]"></a>getDayOfWeek</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, rtc.o(i.getDayOfWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLoader_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>getStrNowDataAndTimeByRTC</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rtc.o(i.getStrNowDataAndTimeByRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = getStrNowDataAndTimeByRTC &rArr; getStrUserTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_GetTime
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrUserTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[171]"></a>getStrUserTime</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, rtc.o(i.getStrUserTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = getStrUserTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
</UL>

<P><STRONG><a name="[118]"></a>get_CheckSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, publiclib_no_one.o(i.get_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; StartOPenDevMode &rArr; ReadTime_EEprom &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNetArgumentInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLoader_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMeterNum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[198]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[189]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[164]"></a>quicksort</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, pt1000.o(i.quicksort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = quicksort &rArr;  quicksort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quicksort
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quicksort
</UL>

<P><STRONG><a name="[172]"></a>setNetArgumentInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at24cxxdataloader.o(i.setNetArgumentInit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>setRtcDate</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, rtc.o(i.setRtcDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[14d]"></a>startReadEEprom</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, taskreadeeprom.o(i.startReadEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = startReadEEprom &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEpromTimerCallback
</UL>

<P><STRONG><a name="[43]"></a>startTimeTask</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, taskabouttimer.o(i.startTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = startTimeTask &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> taskabouttimer.o(i.TimeTask)
<LI> taskabouttimer.o(i.startTimeTask)
</UL>
<P><STRONG><a name="[19b]"></a>swapChr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, strlib.o(i.swapChr))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
</UL>

<P><STRONG><a name="[b3]"></a>swapStr</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, strlib.o(i.swapStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapChr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffToFloatOrDouble
</UL>

<P><STRONG><a name="[176]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[17f]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[188]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[178]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[177]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[17a]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[17c]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[184]"></a>vPortFree</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[17d]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[192]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[12e]"></a>vTaskDelay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[197]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[19d]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[19c]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1a2]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[174]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>

<P><STRONG><a name="[71]"></a>vTaskSwitchContext</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[19f]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[12c]"></a>xQueueGenericCreate</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[12d]"></a>xQueueGenericReceive</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_0_And_1_Receive
</UL>

<P><STRONG><a name="[186]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[16b]"></a>xQueueGenericSend</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltgeTestTimer
</UL>

<P><STRONG><a name="[1a4]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[12a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart1CheckBuff
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart0CheckBuff
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startReadEEprom
</UL>

<P><STRONG><a name="[1a3]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[173]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[14a]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
</UL>

<P><STRONG><a name="[156]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[196]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[da]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>

<P><STRONG><a name="[12b]"></a>xTaskResumeFromISR</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskResumeFromISR &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart1CheckBuff
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart0CheckBuff
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startReadEEprom
</UL>

<P><STRONG><a name="[149]"></a>xTimerCreate</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
</UL>

<P><STRONG><a name="[19e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[14b]"></a>xTimerGenericCommand</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
</UL>

<P><STRONG><a name="[3d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[1a9]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[1aa]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[1ac]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[1ad]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[1ae]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[199]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[19a]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1a0]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[49]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[182]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[183]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[185]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[18c]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[18d]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[195]"></a>prvUnlockQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[175]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[179]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[180]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[181]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[4a]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[187]"></a>prvInitialiseNewTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[17b]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1a5]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a6]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[17e]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[194]"></a>prvGetNextExpireTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[18a]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[18b]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[18e]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[18f]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[191]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[190]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[193]"></a>prvSwitchTimerLists</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[4b]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[ef]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[dd]"></a>FL_GPIO_ClearFlag_EXTI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_ClearFlag_EXTI))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[dc]"></a>FL_GPIO_DisableDigitalFilter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_DisableDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[4c]"></a>FL_GPIO_SetExtiLine0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine0))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>FL_GPIO_SetExtiLine1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine1))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>FL_GPIO_SetExtiLine10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine10))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>FL_GPIO_SetExtiLine11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine11))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>FL_GPIO_SetExtiLine12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine12))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>FL_GPIO_SetExtiLine13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine13))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>FL_GPIO_SetExtiLine14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine14))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>FL_GPIO_SetExtiLine2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine2))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>FL_GPIO_SetExtiLine3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine3))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>FL_GPIO_SetExtiLine4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine4))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>FL_GPIO_SetExtiLine5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine5))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>FL_GPIO_SetExtiLine6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine6))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>FL_GPIO_SetExtiLine7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine7))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>FL_GPIO_SetExtiLine8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine8))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>FL_GPIO_SetExtiLine9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine9))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>FL_GPIO_SetTriggerEdge</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetTriggerEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetTriggerEdge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>FL_GPIO_DisablePinAnalogSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinAnalogSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[de]"></a>FL_GPIO_DisablePinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinInput))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[e0]"></a>FL_GPIO_DisablePinOpenDrain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinOpenDrain))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[df]"></a>FL_GPIO_DisablePinPullup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinPullup))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[e2]"></a>FL_GPIO_DisablePinRemap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinRemap))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[e3]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[e8]"></a>FL_LPTIM32_EnableETRFilter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lptim32.o(i.FL_LPTIM32_EnableETRFilter))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e7]"></a>FL_LPTIM32_SetETRCountEdge</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lptim32.o(i.FL_LPTIM32_SetETRCountEdge))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e9]"></a>FL_LPTIM32_SetETRTriggerEdge</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lptim32.o(i.FL_LPTIM32_SetETRTriggerEdge))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[ec]"></a>FL_RCC_EnableGroup1OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lpuart.o(i.FL_RCC_EnableGroup1OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[eb]"></a>FL_RCC_EnableGroup3BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lpuart.o(i.FL_RCC_EnableGroup3BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[ed]"></a>FL_RCC_RCMF_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_lpuart.o(i.FL_RCC_RCMF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[159]"></a>SystemPLLClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemPLLClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[13c]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mf_config.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
</UL>

<P><STRONG><a name="[11a]"></a>FL_FDET_DisableIT_XTLFFail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_FDET_DisableIT_XTLFFail))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[45]"></a>FL_FDET_IsActiveFlag_XTLFFail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_FDET_IsActiveFlag_XTLFFail))
<BR>[Address Reference Count : 1]<UL><LI> check_xthf_or_xtlf.o(i.check_XTClock_isOk)
</UL>
<P><STRONG><a name="[11b]"></a>FL_RCC_SetLSCLKClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_RCC_SetLSCLKClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[3e]"></a>check_XTClock_isOk</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, check_xthf_or_xtlf.o(i.check_XTClock_isOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = check_XTClock_isOk &rArr; setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetLSCLKClockSource
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FDET_DisableIT_XTLFFail
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> check_xthf_or_xtlf.o(i.LFDET_IRQHandler)
<LI> check_xthf_or_xtlf.o(i.check_XTClock_isOk)
</UL>
<P><STRONG><a name="[7]"></a>_InitRTCTask</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, rtc_settime.o(i._InitRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _InitRTCTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_settime.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_RTCCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc_settime.o(i._RTCCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RTCCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_settime.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_InitSetTimeTask</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, settime.o(i._InitSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _InitSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_LPInitSetTimeTask</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, settime.o(i._LPInitSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _LPInitSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_LPSetCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, settime.o(i._LPSetCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LPSetCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_SetCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, settime.o(i._SetCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>FL_ADC_ClearFlag_EndOfConversion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_ClearFlag_EndOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[109]"></a>FL_ADC_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[103]"></a>FL_ADC_DisableSequencerChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_DisableSequencerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[106]"></a>FL_ADC_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[107]"></a>FL_ADC_EnableSWConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_EnableSWConversion))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[104]"></a>FL_ADC_EnableSequencerChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_EnableSequencerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[108]"></a>FL_ADC_IsActiveFlag_EndOfConversion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_IsActiveFlag_EndOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[b1]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
</UL>

<P><STRONG><a name="[af]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Press
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
</UL>

<P><STRONG><a name="[102]"></a>FL_RCC_SetADCPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.FL_RCC_SetADCPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[110]"></a>FL_SVD_DisableADCMonitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_SVD_DisableADCMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[10c]"></a>FL_SVD_EnableADCMonitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_SVD_EnableADCMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[10f]"></a>FL_VREF_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_VREF_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[10b]"></a>FL_VREF_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_VREF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPressVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[101]"></a>GetAVREFSample_POLL</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, adc.o(i.GetAVREFSample_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetAVREFSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetADCPrescaler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsActiveFlag_EndOfConversion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSWConversion
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableSequencerChannel
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ClearFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
</UL>

<P><STRONG><a name="[112]"></a>GetSingleChannelSample_POLL</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, adc.o(i.GetSingleChannelSample_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetADCPrescaler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsActiveFlag_EndOfConversion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSWConversion
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableSequencerChannel
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ClearFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
</UL>

<P><STRONG><a name="[d6]"></a>EEprom_SDA_SET_IN</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_SDA_SET_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEprom_SDA_SET_IN &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[d7]"></a>EEprom_SDA_SET_OUT</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_SDA_SET_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEprom_SDA_SET_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[119]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c02.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[d8]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c02.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_SET_OUT
</UL>

<P><STRONG><a name="[aa]"></a>FL_BSTIM32_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bstim.o(i.FL_BSTIM32_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>

<P><STRONG><a name="[f3]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gp21.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg32
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg16
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Low_Pwr
</UL>

<P><STRONG><a name="[f4]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gp21.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg32
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg16
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Low_Pwr
</UL>

<P><STRONG><a name="[123]"></a>FL_LPUART_ClearFlag_TXShiftBuffEmpty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_ClearFlag_TXShiftBuffEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_Send
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Send
</UL>

<P><STRONG><a name="[140]"></a>FL_LPUART_EnableIT_RXBuffFull</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_EnableIT_RXBuffFull))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART1_Interrupt_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
</UL>

<P><STRONG><a name="[11e]"></a>FL_LPUART_IsActiveFlag_RXBuffFull</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_IsActiveFlag_RXBuffFull))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>FL_LPUART_IsActiveFlag_TXBuffEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_IsActiveFlag_TXBuffEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_Send
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Send
</UL>

<P><STRONG><a name="[126]"></a>FL_LPUART_IsActiveFlag_TXShiftBuffEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_IsActiveFlag_TXShiftBuffEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_Send
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Send
</UL>

<P><STRONG><a name="[11d]"></a>FL_LPUART_IsEnabledIT_RXBuffFull</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_IsEnabledIT_RXBuffFull))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>FL_LPUART_WriteTXBuff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.FL_LPUART_WriteTXBuff))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_Send
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Send
</UL>

<P><STRONG><a name="[15e]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt1000.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[15f]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt1000.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[144]"></a>RTC_GetRTC</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, rtc.o(i.RTC_GetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_GetRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_GetTime
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[84]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1af]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[1ab]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[9f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[74]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[97]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[99]"></a>_scanf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9a]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9b]"></a>_scanf_wctomb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[98]"></a>_scanf_wstring</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
