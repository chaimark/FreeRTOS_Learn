<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\\FreeRTOS_DeepSleep.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\\FreeRTOS_DeepSleep.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Jul 05 12:20:55 2025
<BR><P>
<H3>Maximum Stack Usage =       1464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AllReceive &rArr; HY_USB_TTL_CheckBuff &rArr; UpData_Receive_Hex &rArr; SaveUpdataToPage8Buff &rArr; writeUpdataBuffDataToFlash &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">NMI_Handler</a><BR>
 <LI><a href="#[1d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">HardFault_Handler</a><BR>
 <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
 <LI><a href="#[273]">quicksort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[273]">quicksort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[34]">AES_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[3d]">ATIM_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[5c]">AllReceive</a> from taskallreceive.o(i.AllReceive) referenced from main.o(i.main)
 <LI><a href="#[60]">Arr_get</a> from jsondataanalyzelib.o(i.Arr_get) referenced from jsondataanalyzelib.o(i.newJsonArrayByString)
 <LI><a href="#[61]">Arr_getArray</a> from jsondataanalyzelib.o(i.Arr_getArray) referenced from jsondataanalyzelib.o(i.newJsonArrayByString)
 <LI><a href="#[5f]">Arr_isJsonNull</a> from jsondataanalyzelib.o(i.Arr_isJsonNull) referenced from jsondataanalyzelib.o(i.newJsonArrayByString)
 <LI><a href="#[5e]">Arr_sizeItemNum</a> from jsondataanalyzelib.o(i.Arr_sizeItemNum) referenced from jsondataanalyzelib.o(i.newJsonArrayByString)
 <LI><a href="#[39]">BSTIM_IRQHandler</a> from bstim.o(i.BSTIM_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[3a]">COMPx_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[36]">DMA_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[4b]">DoneCardCmd</a> from taskallreceive.o(i.DoneCardCmd) referenced from taskallreceive.o(i.AllReceive)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[57]">FL_FDET_IsActiveFlag_XTLFFail</a> from check_xthf_or_xtlf.o(i.FL_FDET_IsActiveFlag_XTLFFail) referenced from check_xthf_or_xtlf.o(i.check_XTClock_isOk)
 <LI><a href="#[70]">FL_GPIO_SetExtiLine0</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine0) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[71]">FL_GPIO_SetExtiLine1</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine1) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[7a]">FL_GPIO_SetExtiLine10</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine10) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[7b]">FL_GPIO_SetExtiLine11</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine11) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[7c]">FL_GPIO_SetExtiLine12</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine12) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[7d]">FL_GPIO_SetExtiLine13</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine13) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[7e]">FL_GPIO_SetExtiLine14</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine14) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[72]">FL_GPIO_SetExtiLine2</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine2) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[73]">FL_GPIO_SetExtiLine3</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine3) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[74]">FL_GPIO_SetExtiLine4</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine4) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[75]">FL_GPIO_SetExtiLine5</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine5) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[76]">FL_GPIO_SetExtiLine6</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine6) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[77]">FL_GPIO_SetExtiLine7</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine7) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[78]">FL_GPIO_SetExtiLine8</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine8) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[79]">FL_GPIO_SetExtiLine9</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine9) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[7f]">FL_GPIO_SetTriggerEdge</a> from fm33lc0xx_fl_exti.o(i.FL_GPIO_SetTriggerEdge) referenced from fm33lc0xx_fl_exti.o(.constdata)
 <LI><a href="#[3f]">GPIO_IRQHandler</a> from taskgpioinit.o(i.GPIO_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[3b]">GPTIM0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[3c]">GPTIM1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[5a]">GpioTask</a> from taskgpioinit.o(i.GpioTask) referenced from main.o(i.main)
 <LI><a href="#[4d]">GpioTaskTimerCallback</a> from taskgpioinit.o(i.GpioTaskTimerCallback) referenced from taskgpioinit.o(i.GpioTask)
 <LI><a href="#[2f]">HFDET_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1d]">HardFault_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[32]">I2C_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[27]">IWDT_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2a]">LCD_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[25]">LFDET_IRQHandler</a> from check_xthf_or_xtlf.o(i.LFDET_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[35]">LPTIM_IRQHandler</a> from lptim32.o(i.LPTIM_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[40]">LPUART0_IRQHandler</a> from lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[50]">LPUART0_ReadData_Deal</a> from lpuart_0_and_1_lib.o(i.LPUART0_ReadData_Deal) referenced from lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler)
 <LI><a href="#[31]">LPUART1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1c]">NMI_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[52]">NoExtrenPowerAndOpenValve</a> from taskabouttimer.o(i.NoExtrenPowerAndOpenValve) referenced from taskabouttimer.o(i.Test_Exter_Power)
 <LI><a href="#[38]">OPAx_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[68]">Obj_getArray</a> from jsondataanalyzelib.o(i.Obj_getArray) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[66]">Obj_getBool</a> from jsondataanalyzelib.o(i.Obj_getBool) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[65]">Obj_getDouble</a> from jsondataanalyzelib.o(i.Obj_getDouble) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[64]">Obj_getInt</a> from jsondataanalyzelib.o(i.Obj_getInt) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[69]">Obj_getObject</a> from jsondataanalyzelib.o(i.Obj_getObject) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[67]">Obj_getString</a> from jsondataanalyzelib.o(i.Obj_getString) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[63]">Obj_isJsonNull</a> from jsondataanalyzelib.o(i.Obj_isJsonNull) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[62]">Obj_sizeStr</a> from jsondataanalyzelib.o(i.Obj_sizeStr) referenced from jsondataanalyzelib.o(i.newJsonObjectByString)
 <LI><a href="#[1f]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[23]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[58]">ReadEEprom</a> from taskeeprom.o(i.ReadEEprom) referenced from main.o(i.main)
 <LI><a href="#[51]">ReadEEpromTimerCallback</a> from taskeeprom.o(i.ReadEEpromTimerCallback) referenced from taskeeprom.o(i.ReadEEprom)
 <LI><a href="#[1b]">Reset_Handler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[28]">SPI1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[29]">SPI2_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[1e]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[22]">SVD_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[88]">ShowBatV</a> from display.o(i.ShowBatV) referenced from display.o(.constdata)
 <LI><a href="#[8a]">ShowErrerCode</a> from display.o(i.ShowErrerCode) referenced from display.o(.constdata)
 <LI><a href="#[8b]">ShowFrontValveCtrlUser</a> from display.o(i.ShowFrontValveCtrlUser) referenced from display.o(.constdata)
 <LI><a href="#[4e]">ShowHomePage</a> from display.o(i.ShowHomePage) referenced from taskgpioinit.o(i.GpioTask)
 <LI><a href="#[4e]">ShowHomePage</a> from display.o(i.ShowHomePage) referenced from display.o(i.ShowHomePage)
 <LI><a href="#[4e]">ShowHomePage</a> from display.o(i.ShowHomePage) referenced from motorctrldev.o(i.Valve_SetDegree)
 <LI><a href="#[4e]">ShowHomePage</a> from display.o(i.ShowHomePage) referenced from at24cxxdataloader.o(i.setNetArgumentInit)
 <LI><a href="#[82]">ShowMeterID</a> from display.o(i.ShowMeterID) referenced from display.o(.constdata)
 <LI><a href="#[83]">ShowNowLimitTime</a> from display.o(i.ShowNowLimitTime) referenced from display.o(.constdata)
 <LI><a href="#[84]">ShowRTCDate_Now</a> from display.o(i.ShowRTCDate_Now) referenced from display.o(.constdata)
 <LI><a href="#[85]">ShowRTCTime_Now</a> from display.o(i.ShowRTCTime_Now) referenced from display.o(.constdata)
 <LI><a href="#[81]">ShowTemper</a> from display.o(i.ShowTemper) referenced from display.o(.constdata)
 <LI><a href="#[87]">ShowUserCtrlDevData</a> from display.o(i.ShowUserCtrlDevData) referenced from display.o(.constdata)
 <LI><a href="#[86]">ShowUserEnableFlag</a> from display.o(i.ShowUserEnableFlag) referenced from display.o(.constdata)
 <LI><a href="#[80]">ShowValvePart</a> from display.o(i.ShowValvePart) referenced from display.o(.constdata)
 <LI><a href="#[89]">ShowVerNum</a> from display.o(i.ShowVerNum) referenced from display.o(.constdata)
 <LI><a href="#[20]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_fm33lc0xx.o(i.SystemInit) referenced from startup_fm33lc0xx.o(.text)
 <LI><a href="#[4c]">Test433AlarmTask</a> from taskabouttimer.o(i.Test433AlarmTask) referenced from rf_cmt2300a_receive.o(i.CMT2300A_RECEIVE_DATA)
 <LI><a href="#[4c]">Test433AlarmTask</a> from taskabouttimer.o(i.Test433AlarmTask) referenced from taskabouttimer.o(i.TimeTask)
 <LI><a href="#[53]">Test_Exter_Power</a> from taskabouttimer.o(i.Test_Exter_Power) referenced from taskabouttimer.o(i.TimeTask)
 <LI><a href="#[5b]">TimeTask</a> from taskabouttimer.o(i.TimeTask) referenced from main.o(i.main)
 <LI><a href="#[30]">U7816_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2b]">UART0_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2d]">UART4_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[2e]">UART5_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[33]">USB_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[3e]">VREF_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[5d]">ValveCtrlTask</a> from task_valve.o(i.ValveCtrlTask) referenced from main.o(i.main)
 <LI><a href="#[37]">WKUP_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[21]">WWDT_IRQHandler</a> from startup_fm33lc0xx.o(.text) referenced from startup_fm33lc0xx.o(RESET)
 <LI><a href="#[59]">WriteEEprom</a> from taskeeprom.o(i.WriteEEprom) referenced from main.o(i.main)
 <LI><a href="#[55]">WriteEEpromTimerCallback</a> from taskeeprom.o(i.WriteEEpromTimerCallback) referenced from taskeeprom.o(i.WriteEEprom)
 <LI><a href="#[19]">_EC20_ReBoot_In_RTC_By_1Second</a> from rtc.o(i._EC20_ReBoot_In_RTC_By_1Second) referenced 2 times from rtc.o(.data)
 <LI><a href="#[15]">_InitRTCTask</a> from rtc_settime.o(i._InitRTCTask) referenced 2 times from rtc_settime.o(.data)
 <LI><a href="#[17]">_InitSetTimeTask</a> from settime.o(i._InitSetTimeTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[11]">_MinInitRTCTask</a> from min_settime.o(i._MinInitRTCTask) referenced 2 times from min_settime.o(.data)
 <LI><a href="#[12]">_MinRTCCloseTask</a> from min_settime.o(i._MinRTCCloseTask) referenced 2 times from min_settime.o(.data)
 <LI><a href="#[13]">_Min_15_InitRTCTask</a> from min_settime.o(i._Min_15_InitRTCTask) referenced 2 times from min_settime.o(.data)
 <LI><a href="#[14]">_Min_15_RTCCloseTask</a> from min_settime.o(i._Min_15_RTCCloseTask) referenced 2 times from min_settime.o(.data)
 <LI><a href="#[16]">_RTCCloseTask</a> from rtc_settime.o(i._RTCCloseTask) referenced 2 times from rtc_settime.o(.data)
 <LI><a href="#[1a]">_RTC_ReBoot_Check</a> from rtc.o(i._RTC_ReBoot_Check) referenced 2 times from rtc.o(.data)
 <LI><a href="#[18]">_SetCloseTask</a> from settime.o(i._SetCloseTask) referenced 2 times from settime.o(.data)
 <LI><a href="#[8c]">__main</a> from __main.o(!!!main) referenced from startup_fm33lc0xx.o(.text)
 <LI><a href="#[56]">_getStrlen</a> from strlib.o(i._getStrlen) referenced from strlib.o(i._strnewInit)
 <LI><a href="#[49]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[46]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[45]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[47]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6e]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[6f]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[6d]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[44]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[43]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[4f]">check_XTClock_isOk</a> from check_xthf_or_xtlf.o(i.check_XTClock_isOk) referenced from check_xthf_or_xtlf.o(i.LFDET_IRQHandler)
 <LI><a href="#[4f]">check_XTClock_isOk</a> from check_xthf_or_xtlf.o(i.check_XTClock_isOk) referenced from check_xthf_or_xtlf.o(i.check_XTClock_isOk)
 <LI><a href="#[4a]">closeLightOrM1</a> from taskallreceive.o(i.closeLightOrM1) referenced from taskallreceive.o(i.AllReceive)
 <LI><a href="#[48]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[6b]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[6c]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[54]">startTimeTask</a> from taskabouttimer.o(i.startTimeTask) referenced from taskabouttimer.o(i.TimeTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b5]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[90]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[93]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2db]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[95]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2dc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2dd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2de]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2df]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2e0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2e1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2e2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2e3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2e4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2e5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2e6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2e7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2e8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2e9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2ea]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2eb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2ec]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2ed]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2ee]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2ef]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2f0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2f1]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2f2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2f3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[2f4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[2f5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2f6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2f7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[8e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2f8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; StartOPenDevMode &rArr; RTC_SetRTC &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2fa]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2fb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2c7]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[263]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[265]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newJsonArrayByString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newJsonObjectByString
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampToRTCData
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MenuPage_Change
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[1b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2fd]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>COMPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPTIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>HFDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>OPAx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>U7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>VREF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lc0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33lc0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a8]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[ab]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataBit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2fe]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
</UL>

<P><STRONG><a name="[2ff]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[300]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[301]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCtimeCard
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrUserTime
</UL>

<P><STRONG><a name="[d7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[d8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[92]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b0]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b1]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[b2]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[b3]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b6]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeNumber_UTCByRTCTime
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
</UL>

<P><STRONG><a name="[b8]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[238]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myStrstr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_isJsonNull
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getDouble
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getBool
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
</UL>

<P><STRONG><a name="[10c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getStrlen
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_isJsonNull
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getDouble
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getBool
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_getArray
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doneAsciiStrToAnyBaseNumberData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
</UL>

<P><STRONG><a name="[302]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataWriteSign
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHex_FF_ToBuff
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
</UL>

<P><STRONG><a name="[be]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[bd]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart0_RxBuffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
</UL>

<P><STRONG><a name="[303]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Motor_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_isJsonNull
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getDouble
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getBool
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_In
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_GPIO1_Set_In
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_IN
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampToRTCData
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCtimeCard
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[304]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[127]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_isJsonNull
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getBool
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_isJsonNull
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[305]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Date_ByHEX
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPartOfSetPointOnRing
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temper_value
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRTCTime_Now
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRTCDate_Now
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNowLimitTime
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeNumber_UTCByRTCTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEpromTimerCallback
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEpromTimerCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[307]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[308]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToUint6410Rate
</UL>

<P><STRONG><a name="[c1]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[309]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[30a]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
</UL>

<P><STRONG><a name="[c7]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[c6]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToUint6410Rate
</UL>

<P><STRONG><a name="[30b]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
</UL>

<P><STRONG><a name="[30c]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[30d]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
</UL>

<P><STRONG><a name="[30e]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToUint6410Rate
</UL>

<P><STRONG><a name="[30f]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffToFloatOrDouble
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToUint6410Rate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[310]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemper_NTC
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
</UL>

<P><STRONG><a name="[cc]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[cb]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveByT2AutoSub
</UL>

<P><STRONG><a name="[311]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemper_NTC
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
</UL>

<P><STRONG><a name="[312]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPartOfSetPointOnRing
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemper_NTC
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
</UL>

<P><STRONG><a name="[313]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[314]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d1]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[96]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[d3]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[d6]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[af]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[b7]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[44]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[ae]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[dd]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[316]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[317]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[318]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[48]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>__vfscanf</STRONG> (Thumb, 900 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[e6]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[31a]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[ec]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[e9]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[ee]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[de]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[df]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[31b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e0]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[6d]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[a2]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f0]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ef]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f1]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[a6]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[fb]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[fc]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[6e]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[6f]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[ff]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[27f]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[100]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[31e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>ASCIIToHEX2</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, numberbaselib.o(i.ASCIIToHEX2))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ASCIIToHEX2 &rArr; doubleChStrToShortChStr
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strArrayToNumberArray
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleChStrToShortChStr
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
</UL>

<P><STRONG><a name="[105]"></a>AT24CXXLoader_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, at24cxxdataloader.o(i.AT24CXXLoader_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AT24CXXLoader_Init &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>Add_HY_DataClass</STRONG> (Thumb, 1418 bytes, Stack size 88 bytes, define.o(i.Add_HY_DataClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Add_HY_DataClass &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToUint6410Rate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[5c]"></a>AllReceive</STRONG> (Thumb, 566 bytes, Stack size 16 bytes, taskallreceive.o(i.AllReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = AllReceive &rArr; HY_USB_TTL_CheckBuff &rArr; UpData_Receive_Hex &rArr; SaveUpdataToPage8Buff &rArr; writeUpdataBuffDataToFlash &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Stop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart0_RxBuffer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSignal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF_DATA_AT_The_Beginning
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Send_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_CLOSE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[60]"></a>Arr_get</STRONG> (Thumb, 420 bytes, Stack size 160 bytes, jsondataanalyzelib.o(i.Arr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Arr_get &rArr; myStrstrCont &rArr; myStrstr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myStrstrCont
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmpty
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonArrayByString)
</UL>
<P><STRONG><a name="[61]"></a>Arr_getArray</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, jsondataanalyzelib.o(i.Arr_getArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Arr_getArray &rArr; catString
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catString
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonArrayByString)
</UL>
<P><STRONG><a name="[5f]"></a>Arr_isJsonNull</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jsondataanalyzelib.o(i.Arr_isJsonNull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Arr_isJsonNull &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonArrayByString)
</UL>
<P><STRONG><a name="[5e]"></a>Arr_sizeItemNum</STRONG> (Thumb, 198 bytes, Stack size 128 bytes, jsondataanalyzelib.o(i.Arr_sizeItemNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Arr_sizeItemNum &rArr; myStrstrCont &rArr; myStrstr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myStrstrCont
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmpty
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonArrayByString)
</UL>
<P><STRONG><a name="[128]"></a>BSTIM32_Setup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bstim.o(i.BSTIM32_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBSTime
</UL>

<P><STRONG><a name="[118]"></a>BSTIM32_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bstim.o(i.BSTIM32_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[39]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bstim.o(i.BSTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSTIM_IRQHandler &rArr; CountSetTimeTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>Battary_GND_OFF</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, adc.o(i.Battary_GND_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Battary_GND_OFF &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[130]"></a>Battary_GND_ON</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(i.Battary_GND_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Battary_GND_ON &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[132]"></a>BuffToFloatOrDouble</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, numberbaselib.o(i.BuffToFloatOrDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BuffToFloatOrDouble &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
</UL>

<P><STRONG><a name="[134]"></a>CMT2300A_AutoSwitchStatus</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_AutoSwitchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GetChipStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoTx
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoSleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
</UL>

<P><STRONG><a name="[139]"></a>CMT2300A_ClearInterruptFlags</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, cmt2300a.o(i.CMT2300A_ClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMT2300A_ClearInterruptFlags &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[13a]"></a>CMT2300A_ClearRxFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_ClearRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_ClearRxFifo &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[13b]"></a>CMT2300A_ClearTxFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_ClearTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_ClearTxFifo &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
</UL>

<P><STRONG><a name="[13c]"></a>CMT2300A_ConfigGpio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_ConfigGpio &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[13d]"></a>CMT2300A_ConfigInterrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_ConfigInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMT2300A_ConfigInterrupt &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[13e]"></a>CMT2300A_ConfigRegBank</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cmt2300a.o(i.CMT2300A_ConfigRegBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CMT2300A_ConfigRegBank &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[13f]"></a>CMT2300A_EnableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_EnableInterrupt &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[140]"></a>CMT2300A_EnableLfosc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_EnableLfosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMT2300A_EnableLfosc &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[141]"></a>CMT2300A_EnableReadFifo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_EnableReadFifo &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[142]"></a>CMT2300A_EnableWriteFifo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_EnableWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_EnableWriteFifo &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
</UL>

<P><STRONG><a name="[143]"></a>CMT2300A_GPIO_Init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, rf_cmt2300a_init.o(i.CMT2300A_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CMT2300A_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[137]"></a>CMT2300A_GetChipStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GetChipStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>

<P><STRONG><a name="[148]"></a>CMT2300A_GetRssiDBm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GetRssiDBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_GetRssiDBm &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
</UL>

<P><STRONG><a name="[149]"></a>CMT2300A_GoRx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMT2300A_GoRx &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[14a]"></a>CMT2300A_GoSleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>

<P><STRONG><a name="[14b]"></a>CMT2300A_GoStby</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[14c]"></a>CMT2300A_GoTx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_GoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMT2300A_GoTx &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
</UL>

<P><STRONG><a name="[14d]"></a>CMT2300A_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SoftReset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[150]"></a>CMT2300A_InitGpio</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a_spi.o(i.CMT2300A_InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMT2300A_InitGpio &rArr; CMT_SPI_Init &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_GPIO1_Set_In
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[153]"></a>CMT2300A_IsExist</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMT2300A_IsExist &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
</UL>

<P><STRONG><a name="[154]"></a>CMT2300A_PWR_OFF</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rf_cmt2300a_init.o(i.CMT2300A_PWR_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMT2300A_PWR_OFF &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_GPIO1_Set_In
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_CLOSE
</UL>

<P><STRONG><a name="[157]"></a>CMT2300A_PWR_ON</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rf_cmt2300a_init.o(i.CMT2300A_PWR_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMT2300A_PWR_ON &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
</UL>

<P><STRONG><a name="[158]"></a>CMT2300A_PollRx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rf_cmt2300a.o(i.CMT2300A_PollRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CMT2300A_PollRx &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetAfcOvfTh
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
</UL>

<P><STRONG><a name="[258]"></a>CMT2300A_RECEIVE_DATA</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, rf_cmt2300a_receive.o(i.CMT2300A_RECEIVE_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMT2300A_RECEIVE_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
</UL>

<P><STRONG><a name="[112]"></a>CMT2300A_RF_CLOSE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf_cmt2300a_init.o(i.CMT2300A_RF_CLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CMT2300A_RF_CLOSE &rArr; CMT2300A_PWR_OFF &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Exter_Power
</UL>

<P><STRONG><a name="[15b]"></a>CMT2300A_RF_OPEN</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, rf_cmt2300a_init.o(i.CMT2300A_RF_OPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CMT2300A_RF_OPEN &rArr; RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_ON
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Exter_Power
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
</UL>

<P><STRONG><a name="[15e]"></a>CMT2300A_ReadFifo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT2300A_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CMT2300A_ReadFifo &rArr; CMT_SPI_Read_fifo &rArr; CMT_SPI_Receive &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
</UL>

<P><STRONG><a name="[138]"></a>CMT2300A_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT2300A_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPayloadLength
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GetRssiDBm
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GetChipStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableWriteFifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigInterrupt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[159]"></a>CMT2300A_SetAfcOvfTh</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SetAfcOvfTh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_SetAfcOvfTh &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[15a]"></a>CMT2300A_SetFrequencyChannel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SetFrequencyChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_SetFrequencyChannel &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PollRx
</UL>

<P><STRONG><a name="[161]"></a>CMT2300A_SetPayloadLength</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cmt2300a.o(i.CMT2300A_SetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMT2300A_SetPayloadLength &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
</UL>

<P><STRONG><a name="[14e]"></a>CMT2300A_SoftReset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmt2300a.o(i.CMT2300A_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CMT2300A_SoftReset &rArr; CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
</UL>

<P><STRONG><a name="[162]"></a>CMT2300A_WriteFifo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT2300A_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CMT2300A_WriteFifo &rArr; CMT_SPI_Write_fifo &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
</UL>

<P><STRONG><a name="[135]"></a>CMT2300A_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT2300A_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CMT2300A_WriteReg &rArr; CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SoftReset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPayloadLength
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetFrequencyChannel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetAfcOvfTh
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_IsExist
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableWriteFifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableInterrupt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigRegBank
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigInterrupt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigGpio
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[151]"></a>CMT_SPI_GPIO1_Set_In</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, define.o(i.CMT_SPI_GPIO1_Set_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMT_SPI_GPIO1_Set_In &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_InitGpio
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_OFF
</UL>

<P><STRONG><a name="[152]"></a>CMT_SPI_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cmt2300a_spi.o(i.CMT_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CMT_SPI_Init &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_InitGpio
</UL>

<P><STRONG><a name="[160]"></a>CMT_SPI_Read</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_In
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Receive
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
</UL>

<P><STRONG><a name="[15f]"></a>CMT_SPI_Read_fifo</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT_SPI_Read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMT_SPI_Read_fifo &rArr; CMT_SPI_Receive &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_In
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Receive
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadFifo
</UL>

<P><STRONG><a name="[16a]"></a>CMT_SPI_Receive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMT_SPI_Receive &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
</UL>

<P><STRONG><a name="[169]"></a>CMT_SPI_SDIO_Set_In</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, define.o(i.CMT_SPI_SDIO_Set_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMT_SPI_SDIO_Set_In &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
</UL>

<P><STRONG><a name="[156]"></a>CMT_SPI_SDIO_Set_Out</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, define.o(i.CMT_SPI_SDIO_Set_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CMT_SPI_SDIO_Set_Out &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_OFF
</UL>

<P><STRONG><a name="[168]"></a>CMT_SPI_Send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT_SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
</UL>

<P><STRONG><a name="[164]"></a>CMT_SPI_Write</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMT_SPI_Write &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_In
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Send
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
</UL>

<P><STRONG><a name="[163]"></a>CMT_SPI_Write_fifo</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, cmt2300a_spi.o(i.CMT_SPI_Write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CMT_SPI_Write_fifo &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_In
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Send
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteFifo
</UL>

<P><STRONG><a name="[16b]"></a>CalulateCRC</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, si522a_app.o(i.CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CalulateCRC &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
</UL>

<P><STRONG><a name="[1fd]"></a>Cault_CS</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, define.o(i.Cault_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cault_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[292]"></a>CheckMeterNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, define.o(i.CheckMeterNum))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>Check_Date_ByHEX</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, rtc.o(i.Check_Date_ByHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>

<P><STRONG><a name="[172]"></a>Check_Key_Line_value</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, taskgpioinit.o(i.Check_Key_Line_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Check_Key_Line_value &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
</UL>

<P><STRONG><a name="[173]"></a>Check_Temper_Battery_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mf_config.o(i.Check_Temper_Battery_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Check_Temper_Battery_Init &rArr; MF_ADC_Sampling_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
</UL>

<P><STRONG><a name="[28a]"></a>Check_Time_ByHEX</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, rtc.o(i.Check_Time_ByHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Time_ByHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
</UL>

<P><STRONG><a name="[177]"></a>ClearDisplayAll</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display_lcd_lib.o(i.ClearDisplayAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ClearDisplayAll &rArr; LcdDisplayRefresh &rArr; FL_LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHomePage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWait
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOpenPage
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowClosePage
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MenuPage_Change
</UL>

<P><STRONG><a name="[117]"></a>Clr_LPUart0_RxBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.Clr_LPUart0_RxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clr_LPUart0_RxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[278]"></a>ComputeNeedPage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, updata.o(i.ComputeNeedPage))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
</UL>

<P><STRONG><a name="[179]"></a>Config_Init_XTHF_And_XTLF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.Config_Init_XTHF_And_XTLF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Config_Init_XTHF_And_XTLF &rArr; XTLF_Config_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[12b]"></a>CountSetTimeTask</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, settime.o(i.CountSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountSetTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>CtrlCmdSubData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, define.o(i.CtrlCmdSubData))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
</UL>

<P><STRONG><a name="[17b]"></a>CtrlValveByT2AutoSub</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, taskabouttimer.o(i.CtrlValveByT2AutoSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CtrlValveByT2AutoSub &rArr; ValveCtrlStart &rArr; isRunningForValve &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPartOfSetPointOnRing
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[188]"></a>CtrlValveCard</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, taskallreceive.o(i.CtrlValveCard))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoneCardCmd
</UL>

<P><STRONG><a name="[180]"></a>Device_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, define.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Device_Init &rArr; InfraredCtrlSub &rArr; LPUART0_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredCtrlSub
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[183]"></a>DoingCmdSub</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, define.o(i.DoingCmdSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DoingCmdSub &rArr; WeiteCmdSubData &rArr; RTC_SetRTC &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResCmdSubData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlCmdSubData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[4b]"></a>DoneCardCmd</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, taskallreceive.o(i.DoneCardCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DoneCardCmd &rArr; LimitCard &rArr; getTimeNumber_UTCByRTCTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCtimeCard
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveCard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskallreceive.o(i.AllReceive)
</UL>
<P><STRONG><a name="[10b]"></a>DoubleOrFloatToBuff</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, numberbaselib.o(i.DoubleOrFloatToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DoubleOrFloatToBuff &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[18c]"></a>EEprom_AT24C0XXData_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_AT24C0XXData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EEprom_AT24C0XXData_Write &rArr; EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRunTime
</UL>

<P><STRONG><a name="[18e]"></a>EEprom_AT24CXX_Parameter_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_AT24CXX_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EEprom_AT24CXX_Parameter_Init &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[18f]"></a>EEprom_Byte1Read</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>

<P><STRONG><a name="[191]"></a>EEprom_Byte1Read_No_Check</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Read_No_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>

<P><STRONG><a name="[190]"></a>EEprom_Byte1Write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
</UL>

<P><STRONG><a name="[198]"></a>EEprom_Byte1Write_No_Check</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, at24c02.o(i.EEprom_Byte1Write_No_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEprom_Byte1Write_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
</UL>

<P><STRONG><a name="[10e]"></a>EEprom_Read_Start</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_Read_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime_EEprom
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRunTime
</UL>

<P><STRONG><a name="[18d]"></a>EEprom_Write_Start</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, at24c02.o(i.EEprom_Write_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRunTime
</UL>

<P><STRONG><a name="[21e]"></a>FL_ADC_CommonInit</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, fm33lc0xx_fl_adc.o(i.FL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
</UL>

<P><STRONG><a name="[21f]"></a>FL_ADC_Init</STRONG> (Thumb, 884 bytes, Stack size 16 bytes, fm33lc0xx_fl_adc.o(i.FL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
</UL>

<P><STRONG><a name="[220]"></a>FL_BSTIM32_Init</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, fm33lc0xx_fl_bstim32.o(i.FL_BSTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_BSTIM32_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
</UL>

<P><STRONG><a name="[1bb]"></a>FL_DelayInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33lc0xx_fl.o(i.FL_DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[14f]"></a>FL_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReceiveData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_CLOSE
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_ON
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_OFF
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Key_Line_value
</UL>

<P><STRONG><a name="[136]"></a>FL_DelayUs</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, publiclib_no_one.o(i.FL_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_AutoSwitchStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SI522
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[22a]"></a>FL_EXTI_CommonInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_EXTI_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Init
</UL>

<P><STRONG><a name="[146]"></a>FL_EXTI_Init</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, fm33lc0xx_fl_exti.o(i.FL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisableDigitalFilter
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ClearFlag_EXTI
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
</UL>

<P><STRONG><a name="[1a0]"></a>FL_FLASH_PageErase</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_FLASH_PageErase
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup2OperationClock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup2BusClock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_DisableGroup2OperationClock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_DisableGroup2BusClock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_UnlockFlash
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_SetFlashEraseType
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_LockFlash
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_KeyError
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_EraseComplete
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_ClockError
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_AuthenticationError
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_GetFlashLockStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_EnableErase
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_ClearFlag_EraseComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>

<P><STRONG><a name="[1b1]"></a>FL_FLASH_Program_Page</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_Program_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup2OperationClock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup2BusClock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_DisableGroup2OperationClock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_DisableGroup2BusClock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_UnlockFlash
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_LockFlash
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_ProgramComplete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_KeyError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_ClockError
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_AuthenticationError
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_EnableProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>

<P><STRONG><a name="[12e]"></a>FL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinRemap
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinPullup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinOpenDrain
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinInput
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinAnalogSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SI522A_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Motor_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_I2C_MASTER_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RCC_XTLF_IO_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_Out
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_SDIO_Set_In
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_GPIO1_Set_In
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_IN
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[22f]"></a>FL_IWDT_Init</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, fm33lc0xx_fl_iwdt.o(i.FL_IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FL_IWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_IWDT_Init
</UL>

<P><STRONG><a name="[1ba]"></a>FL_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.FL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>FL_LCD_Init</STRONG> (Thumb, 602 bytes, Stack size 16 bytes, fm33lc0xx_fl_lcd.o(i.FL_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FL_LCD_Init &rArr; FL_LCD_DisplayFreq &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
</UL>

<P><STRONG><a name="[1c4]"></a>FL_LPUART0_Init</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, fm33lc0xx_fl_lpuart.o(i.FL_LPUART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_LPUART0_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_RCMF_Enable
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup3BusClock
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_EnableGroup1OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Init
</UL>

<P><STRONG><a name="[147]"></a>FL_NVIC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fm33lc0xx_fl.o(i.FL_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQ_Second
</UL>

<P><STRONG><a name="[233]"></a>FL_PMU_Sleep_Init</STRONG> (Thumb, 308 bytes, Stack size 12 bytes, fm33lc0xx_fl_pmu.o(i.FL_PMU_Sleep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_PMU_Sleep_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
</UL>

<P><STRONG><a name="[1ca]"></a>FL_RTC_ConfigTime</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_ConfigTime))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[248]"></a>FL_RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>

<P><STRONG><a name="[1c9]"></a>FL_RTC_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, fm33lc0xx_fl_rtc.o(i.FL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>

<P><STRONG><a name="[176]"></a>GP21_GPIO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gp21.o(i.GP21_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temper_Battery_Init
</UL>

<P><STRONG><a name="[1cb]"></a>GP21_Get_Data32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gp21.o(i.GP21_Get_Data32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GP21_Get_Data32 &rArr; GP21_Read_Reg32
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[1cd]"></a>GP21_Goto_Low_Pwr</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gp21.o(i.GP21_Goto_Low_Pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GP21_Goto_Low_Pwr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[1d0]"></a>GP21_Goto_Realy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gp21.o(i.GP21_Goto_Realy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GP21_Goto_Realy &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[1d3]"></a>GP21_Read_Reg16</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gp21.o(i.GP21_Read_Reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GP21_Read_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Status
</UL>

<P><STRONG><a name="[1cc]"></a>GP21_Read_Reg32</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gp21.o(i.GP21_Read_Reg32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GP21_Read_Reg32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Get_Data32
</UL>

<P><STRONG><a name="[1d4]"></a>GP21_Read_Status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp21.o(i.GP21_Read_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GP21_Read_Status &rArr; GP21_Read_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[1d1]"></a>GP21_Reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gp21.o(i.GP21_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GP21_Reset &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
</UL>

<P><STRONG><a name="[1d6]"></a>GP21_SPI_Register</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gp21.o(i.GP21_SPI_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GP21_SPI_Register &rArr; GP21_Write_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
</UL>

<P><STRONG><a name="[1d2]"></a>GP21_Spi_Init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, gp21.o(i.GP21_Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GP21_Spi_Init &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg_DelayTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_SPI_Register
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
</UL>

<P><STRONG><a name="[1d5]"></a>GP21_Write_Reg16</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gp21.o(i.GP21_Write_Reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GP21_Write_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg_DelayTime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_SPI_Register
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
</UL>

<P><STRONG><a name="[1d7]"></a>GP21_Write_Reg_DelayTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp21.o(i.GP21_Write_Reg_DelayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GP21_Write_Reg_DelayTime &rArr; GP21_Write_Reg16
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
</UL>

<P><STRONG><a name="[3f]"></a>GPIO_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, taskgpioinit.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GPIO_IRQHandler &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReciveData
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_IsActiveFlag_EXTI
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ClearFlag_EXTI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>GetBatVoltage</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, adc.o(i.GetBatVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetBatVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_EnableADCMonitor
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_DisableADCMonitor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[1ed]"></a>GetMotorDegree</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, adc.o(i.GetMotorDegree))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetMotorDegree &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempDegree
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ValueDegree
</UL>

<P><STRONG><a name="[1e9]"></a>GetSingleChannelVoltage_POLL</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, adc.o(i.GetSingleChannelVoltage_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[1ee]"></a>GetTempDegree</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.GetTempDegree))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
</UL>

<P><STRONG><a name="[1f2]"></a>GetTempVoltage</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, adc.o(i.GetTempVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetTempVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_EnableADCMonitor
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SVD_DisableADCMonitor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temper_value
</UL>

<P><STRONG><a name="[1f3]"></a>GetTemper_NTC</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, adc.o(i.GetTemper_NTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetTemper_NTC &rArr; Get_Temper_value &rArr; GetTempVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temper_value
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
</UL>

<P><STRONG><a name="[1f4]"></a>Get_Temper_value</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc.o(i.Get_Temper_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Get_Temper_value &rArr; GetTempVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemper_NTC
</UL>

<P><STRONG><a name="[5a]"></a>GpioTask</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, taskgpioinit.o(i.GpioTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GpioTask &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MenuPage_Change
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4d]"></a>GpioTaskTimerCallback</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, taskgpioinit.o(i.GpioTaskTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GpioTaskTimerCallback &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataBit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Key_Line_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgpioinit.o(i.GpioTask)
</UL>
<P><STRONG><a name="[115]"></a>HY_USB_TTL_CheckBuff</STRONG> (Thumb, 1452 bytes, Stack size 248 bytes, define.o(i.HY_USB_TTL_CheckBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448 + Unknown Stack Size
<LI>Call Chain = HY_USB_TTL_CheckBuff &rArr; UpData_Receive_Hex &rArr; SaveUpdataToPage8Buff &rArr; writeUpdataBuffDataToFlash &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CheckSum
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8_Connect_U8
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catString
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newJsonObjectByString
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cault_CS
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[202]"></a>IIC_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, si522a_interface.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Ack &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[194]"></a>IIC_Check_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Check_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Check_Ack &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[207]"></a>IIC_NAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, si522a_interface.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_NAck &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[208]"></a>IIC_Read_Byte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, si522a_interface.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
</UL>

<P><STRONG><a name="[196]"></a>IIC_RevByte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at24c02.o(i.IIC_RevByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_RevByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[193]"></a>IIC_SendByte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, at24c02.o(i.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[197]"></a>IIC_SendNoAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at24c02.o(i.IIC_SendNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_SendNoAck &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[20a]"></a>IIC_Send_Byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, si522a_interface.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Send_Byte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_WriteRawRC
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
</UL>

<P><STRONG><a name="[192]"></a>IIC_Start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Start &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
</UL>

<P><STRONG><a name="[20b]"></a>IIC_Start_SI522</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, si522a_interface.o(i.IIC_Start_SI522))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Start_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_WriteRawRC
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
</UL>

<P><STRONG><a name="[195]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at24c02.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Stop &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Write_No_Check
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Byte1Read_No_Check
</UL>

<P><STRONG><a name="[20c]"></a>IIC_Stop_SI522</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, si522a_interface.o(i.IIC_Stop_SI522))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_WriteRawRC
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[20d]"></a>IIC_Wait_Ack</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, si522a_interface.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_WriteRawRC
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
</UL>

<P><STRONG><a name="[16c]"></a>I_SI522A_ClearBitMask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, si522a_app.o(i.I_SI522A_ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I_SI522A_ClearBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[20e]"></a>I_SI522A_IO_Init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, si522a_interface.o(i.I_SI522A_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I_SI522A_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
</UL>

<P><STRONG><a name="[16f]"></a>I_SI522A_IO_Read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, si522a_interface.o(i.I_SI522A_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I_SI522A_IO_Read &rArr; SI522A_I2C_LL_ReadRawRC &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[16d]"></a>I_SI522A_IO_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, si522a_interface.o(i.I_SI522A_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI522A_I2C_LL_WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[16e]"></a>I_SI522A_SetBitMask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, si522a_app.o(i.I_SI522A_SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[181]"></a>InfraredCtrlSub</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, define.o(i.InfraredCtrlSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InfraredCtrlSub &rArr; LPUART0_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[1f8]"></a>LCD_MenuPage_Change</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, display.o(i.LCD_MenuPage_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_MenuPage_Change &rArr; background &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
</UL>

<P><STRONG><a name="[25b]"></a>LCD_Num_Data</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, display_lcd_lib.o(i.LCD_Num_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWait
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVerNum
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowValvePart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUserEnableFlag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUserCtrlDevData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTemper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRTCTime_Now
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRTCDate_Now
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOpenPage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNowLimitTime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMeterID
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFrontValveCtrlUser
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrerCode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowClosePage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatV
</UL>

<P><STRONG><a name="[214]"></a>LCD_SetDotPx</STRONG> (Thumb, 234 bytes, Stack size 4 bytes, display_lcd_lib.o(i.LCD_SetDotPx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetDotPx &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowValvePart
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUserCtrlDevData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTemper
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatV
</UL>

<P><STRONG><a name="[25]"></a>LFDET_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.LFDET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LFDET_IRQHandler &rArr; MF_RTC_1S_Init &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetLSCLKClockSource
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FDET_DisableIT_XTLFFail
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lptim32.o(i.LPTIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPUART0_IRQHandler &rArr; OpenBSTime &rArr; BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBSTime
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_LPUART0_RX_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LPUart0_RxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[212]"></a>LPUART0_Init</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, lpuart_0_and_1_lib.o(i.LPUART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LPUART0_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART0_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredCtrlSub
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
</UL>

<P><STRONG><a name="[50]"></a>LPUART0_ReadData_Deal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpuart_0_and_1_lib.o(i.LPUART0_ReadData_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPUART0_ReadData_Deal &rArr; LPUart0CheckBuff &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart0CheckBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpuart_0_and_1_lib.o(i.LPUART0_IRQHandler)
</UL>
<P><STRONG><a name="[116]"></a>LPUART0_Send</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, lpuart_0_and_1_lib.o(i.LPUART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPUART0_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[219]"></a>LPUart0CheckBuff</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, taskallreceive.o(i.LPUart0CheckBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPUart0CheckBuff &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_ReadData_Deal
</UL>

<P><STRONG><a name="[178]"></a>LcdDisplayRefresh</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, display_lcd_lib.o(i.LcdDisplayRefresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LcdDisplayRefresh &rArr; FL_LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHomePage
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWait
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSignal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOpenPage
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowClosePage
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MenuPage_Change
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
</UL>

<P><STRONG><a name="[187]"></a>LimitCard</STRONG> (Thumb, 224 bytes, Stack size 96 bytes, taskallreceive.o(i.LimitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = LimitCard &rArr; getTimeNumber_UTCByRTCTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeNumber_UTCByRTCTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoneCardCmd
</UL>

<P><STRONG><a name="[174]"></a>MF_ADC_Common_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adc.o(i.MF_ADC_Common_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MF_ADC_Common_Init &rArr; FL_ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temper_Battery_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[175]"></a>MF_ADC_Sampling_Init</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, adc.o(i.MF_ADC_Sampling_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MF_ADC_Sampling_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temper_Battery_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
</UL>

<P><STRONG><a name="[129]"></a>MF_BSTIM32_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bstim.o(i.MF_BSTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM32_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>

<P><STRONG><a name="[221]"></a>MF_Clock_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, mf_config.o(i.MF_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MF_Clock_Init &rArr; MF_RCC_XTLF_IO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RCC_XTLF_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>MF_Config_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mf_config.o(i.MF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MF_Config_Init &rArr; MF_LCD_Init &rArr; FL_LCD_Init &rArr; FL_LCD_DisplayFreq &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SI522A_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Motor_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_I2C_MASTER_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temper_Battery_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229]"></a>MF_EXTI_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, taskgpioinit.o(i.MF_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MF_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
</UL>

<P><STRONG><a name="[22b]"></a>MF_EXTI_Line_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, taskgpioinit.o(i.MF_EXTI_Line_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MF_EXTI_Line_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ClearFlag_EXTI
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[22c]"></a>MF_GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mf_config.o(i.MF_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>MF_I2C_MASTER_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at24c02.o(i.MF_I2C_MASTER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_I2C_MASTER_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[22e]"></a>MF_IWDT_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mf_config.o(i.MF_IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MF_IWDT_Init &rArr; FL_IWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_IWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[225]"></a>MF_LCD_Init</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, display_lcd_lib.o(i.MF_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MF_LCD_Init &rArr; FL_LCD_Init &rArr; FL_LCD_DisplayFreq &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_EnableSEGEN0
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_EnableCOMEN
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[262]"></a>MF_LPUART0_Interrupt_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.MF_LPUART0_Interrupt_Init))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[227]"></a>MF_Motor_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, motorctrldev.o(i.MF_Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_Motor_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[224]"></a>MF_PMU_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mf_config.o(i.MF_PMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MF_PMU_Init &rArr; FL_PMU_Sleep_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[222]"></a>MF_RCC_XTLF_IO_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mf_config.o(i.MF_RCC_XTLF_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_RCC_XTLF_IO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[182]"></a>MF_RTC_1S_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(i.MF_RTC_1S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MF_RTC_1S_Init &rArr; FL_DelayMs &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQ_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
</UL>

<P><STRONG><a name="[228]"></a>MF_SI522A_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, si522a_interface.o(i.MF_SI522A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_SI522A_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[24a]"></a>MinCountRTCTask</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, min_settime.o(i.MinCountRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MinCountRTCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>Min_15_CountRTCTask</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, min_settime.o(i.Min_15_CountRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Min_15_CountRTCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>Module_Send_Data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_cmt2300a_tx.o(i.Module_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Module_Send_Data &rArr; Send_RF_DATA &rArr; Send_RF &rArr; CMT2300A_RF_OPEN &rArr; RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[291]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, define.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>New_Str_Obj</STRONG> (Thumb, 42 bytes, Stack size 36 bytes, strlib.o(i.New_Str_Obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = New_Str_Obj
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doneAsciiStrToAnyBaseNumberData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_isJsonNull
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getDouble
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getBool
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNowLimitTime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMeterID
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCtimeCard
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoneCardCmd
</UL>

<P><STRONG><a name="[52]"></a>NoExtrenPowerAndOpenValve</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, taskabouttimer.o(i.NoExtrenPowerAndOpenValve))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NoExtrenPowerAndOpenValve &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskabouttimer.o(i.Test_Exter_Power)
</UL>
<P><STRONG><a name="[255]"></a>NowPackIsGotoNextPage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, updata.o(i.NowPackIsGotoNextPage))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
</UL>

<P><STRONG><a name="[68]"></a>Obj_getArray</STRONG> (Thumb, 186 bytes, Stack size 144 bytes, jsondataanalyzelib.o(i.Obj_getArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Obj_getArray &rArr; getDoubleChrOnString &rArr; pop
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newJsonArrayByString
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoubleChrOnString
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[66]"></a>Obj_getBool</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, jsondataanalyzelib.o(i.Obj_getBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Obj_getBool &rArr; _getKeyName &rArr; catString
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[65]"></a>Obj_getDouble</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, jsondataanalyzelib.o(i.Obj_getDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Obj_getDouble &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[64]"></a>Obj_getInt</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, jsondataanalyzelib.o(i.Obj_getInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Obj_getInt &rArr; doneAsciiStrToAnyBaseNumberData &rArr; anyBaseArrayToAnyBaseNumber &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doneAsciiStrToAnyBaseNumberData
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[69]"></a>Obj_getObject</STRONG> (Thumb, 186 bytes, Stack size 160 bytes, jsondataanalyzelib.o(i.Obj_getObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Obj_getObject &rArr; getDoubleChrOnString &rArr; pop
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoubleChrOnString
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newJsonObjectByString
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[67]"></a>Obj_getString</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, jsondataanalyzelib.o(i.Obj_getString))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Obj_getString &rArr; _getKeyName &rArr; catString
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[63]"></a>Obj_isJsonNull</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, jsondataanalyzelib.o(i.Obj_isJsonNull))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Obj_isJsonNull &rArr; _getKeyName &rArr; catString
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[62]"></a>Obj_sizeStr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jsondataanalyzelib.o(i.Obj_sizeStr))
<BR>[Address Reference Count : 1]<UL><LI> jsondataanalyzelib.o(i.newJsonObjectByString)
</UL>
<P><STRONG><a name="[217]"></a>OpenBSTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, taskallreceive.o(i.OpenBSTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OpenBSTime &rArr; BSTIM32_Setup &rArr; MF_BSTIM32_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>OpenUartOfLightOrM1</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, taskallreceive.o(i.OpenUartOfLightOrM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OpenUartOfLightOrM1 &rArr; PCD_SI522A_TypeA_Init &rArr; PcdAntennaOn &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
</UL>

<P><STRONG><a name="[23d]"></a>PCD_SI522A_TypeA_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, si522a_app.o(i.PCD_SI522A_TypeA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PCD_SI522A_TypeA_Init &rArr; PcdAntennaOn &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
</UL>

<P><STRONG><a name="[11b]"></a>PCD_SI522A_TypeA_rw_block</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, si522a_app.o(i.PCD_SI522A_TypeA_rw_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = PCD_SI522A_TypeA_rw_block &rArr; PcdSelect1 &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[23e]"></a>PcdAntennaOn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, si522a_app.o(i.PcdAntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdAntennaOn &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_Init
</UL>

<P><STRONG><a name="[240]"></a>PcdAnticoll</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, si522a_app.o(i.PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
</UL>

<P><STRONG><a name="[242]"></a>PcdAuthState</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, si522a_app.o(i.PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PcdAuthState &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
</UL>

<P><STRONG><a name="[245]"></a>PcdComMF522</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, si522a_app.o(i.PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[244]"></a>PcdHalt</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, si522a_app.o(i.PcdHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PcdHalt &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
</UL>

<P><STRONG><a name="[243]"></a>PcdRead</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, si522a_app.o(i.PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PcdRead &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
</UL>

<P><STRONG><a name="[23f]"></a>PcdRequest</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, si522a_app.o(i.PcdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_SetBitMask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
</UL>

<P><STRONG><a name="[241]"></a>PcdSelect1</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, si522a_app.o(i.PcdSelect1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PcdSelect1 &rArr; PcdComMF522 &rArr; I_SI522A_SetBitMask &rArr; I_SI522A_IO_Write &rArr; SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strnewInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_ClearBitMask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
</UL>

<P><STRONG><a name="[246]"></a>RF_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_cmt2300a.o(i.RF_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RF_Config &rArr; CMT2300A_GoSleep &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoSleep
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableLfosc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableInterrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigInterrupt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[15d]"></a>RF_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rf_cmt2300a.o(i.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_InitGpio
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ConfigRegBank
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
</UL>

<P><STRONG><a name="[1dc]"></a>RF_ReciveData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, taskallreceive.o(i.RF_ReciveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF_ReciveData &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[23]"></a>RTC_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RTC_IRQHandler &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecondCountRTCTask
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Min_15_CountRTCTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinCountRTCTask
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>RTC_IRQ_Second</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQ_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_IRQ_Second &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
</UL>

<P><STRONG><a name="[24c]"></a>RTC_SetRTC</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtc.o(i.RTC_SetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RTC_SetRTC &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTimeFrom
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[24e]"></a>Radio_Send_FixedLen</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rf_cmt2300a.o(i.Radio_Send_FixedLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Radio_Send_FixedLen &rArr; CMT2300A_GoTx &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_WriteFifo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadReg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_SetPayloadLength
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoTx
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableWriteFifo
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_EnableReadFifo
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
</UL>

<P><STRONG><a name="[58]"></a>ReadEEprom</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, taskeeprom.o(i.ReadEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ReadEEprom &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunEEprom
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EEprom_RunFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[51]"></a>ReadEEpromTimerCallback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, taskeeprom.o(i.ReadEEpromTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReadEEpromTimerCallback &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskeeprom.o(i.ReadEEprom)
</UL>
<P><STRONG><a name="[251]"></a>ReadTime_EEprom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at24c02.o(i.ReadTime_EEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadTime_EEprom &rArr; EEprom_Read_Start &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
</UL>

<P><STRONG><a name="[186]"></a>ResCmdSubData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, define.o(i.ResCmdSubData))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
</UL>

<P><STRONG><a name="[20f]"></a>SI522A_I2C_LL_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, si522a_interface.o(i.SI522A_I2C_LL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Init
</UL>

<P><STRONG><a name="[210]"></a>SI522A_I2C_LL_ReadRawRC</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, si522a_interface.o(i.SI522A_I2C_LL_ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SI522A_I2C_LL_ReadRawRC &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SI522
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Read
</UL>

<P><STRONG><a name="[211]"></a>SI522A_I2C_LL_WriteRawRC</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, si522a_interface.o(i.SI522A_I2C_LL_WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI522A_I2C_LL_WriteRawRC &rArr; IIC_Wait_Ack &rArr; IIC_Stop_SI522 &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SI522
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SI522A_IO_Write
</UL>

<P><STRONG><a name="[1e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[252]"></a>SaveUpdataToPage8Buff</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, updata.o(i.SaveUpdataToPage8Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SaveUpdataToPage8Buff &rArr; writeUpdataBuffDataToFlash &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeUpdataBuffDataToFlash
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashDataToUpdataBuff
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHex_FF_ToBuff
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NowPackIsGotoNextPage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
</UL>

<P><STRONG><a name="[218]"></a>Save_LPUART0_RX_Data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpuart_0_and_1_lib.o(i.Save_LPUART0_RX_Data))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[249]"></a>SecondCountRTCTask</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, rtc_settime.o(i.SecondCountRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecondCountRTCTask
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>Send_RF</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rf_cmt2300a_tx.o(i.Send_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Send_RF &rArr; CMT2300A_RF_OPEN &rArr; RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadFifo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GetRssiDBm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSignal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RECEIVE_DATA
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Send_FixedLen
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF_DATA_AT_The_Beginning
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF_DATA
</UL>

<P><STRONG><a name="[235]"></a>Send_RF_DATA</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rf_cmt2300a_tx.o(i.Send_RF_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Send_RF_DATA &rArr; Send_RF &rArr; CMT2300A_RF_OPEN &rArr; RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Send_Data
</UL>

<P><STRONG><a name="[111]"></a>Send_RF_DATA_AT_The_Beginning</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rf_cmt2300a_tx.o(i.Send_RF_DATA_AT_The_Beginning))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Send_RF_DATA_AT_The_Beginning &rArr; Send_RF &rArr; CMT2300A_RF_OPEN &rArr; RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[15c]"></a>SetErrerCode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, define.o(i.SetErrerCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ValueDegree
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSystemAlarm
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SI522A_TypeA_rw_block
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
</UL>

<P><STRONG><a name="[189]"></a>SetRTCtimeCard</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, taskallreceive.o(i.SetRTCtimeCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SetRTCtimeCard &rArr; setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoneCardCmd
</UL>

<P><STRONG><a name="[88]"></a>ShowBatV</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, display.o(i.ShowBatV))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowBatV &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDotPx
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>ShowClosePage</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, display.o(i.ShowClosePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowClosePage &rArr; background &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
</UL>

<P><STRONG><a name="[8a]"></a>ShowErrerCode</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, display.o(i.ShowErrerCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowErrerCode &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ShowFrontValveCtrlUser</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, display.o(i.ShowFrontValveCtrlUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowFrontValveCtrlUser &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>ShowHomePage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(i.ShowHomePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ShowHomePage &rArr; ShowValvePart &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowValvePart
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
</UL>
<BR>[Address Reference Count : 4]<UL><LI> at24cxxdataloader.o(i.setNetArgumentInit)
<LI> display.o(i.ShowHomePage)
<LI> motorctrldev.o(i.Valve_SetDegree)
<LI> taskgpioinit.o(i.GpioTask)
</UL>
<P><STRONG><a name="[82]"></a>ShowMeterID</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, display.o(i.ShowMeterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ShowMeterID &rArr; shortChStrToDoubleChStr &rArr; anyBaseNumberToSameArray &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shortChStrToDoubleChStr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ShowNowLimitTime</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, display.o(i.ShowNowLimitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ShowNowLimitTime &rArr; getTimeNumber_UTCByRTCTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeNumber_UTCByRTCTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampToRTCData
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>ShowOpenPage</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, display.o(i.ShowOpenPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowOpenPage &rArr; background &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
</UL>

<P><STRONG><a name="[84]"></a>ShowRTCDate_Now</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, display.o(i.ShowRTCDate_Now))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ShowRTCDate_Now &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ShowRTCTime_Now</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, display.o(i.ShowRTCTime_Now))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ShowRTCTime_Now &rArr; LCD_Num_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>ShowSignal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, display.o(i.ShowSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ShowSignal &rArr; LcdDisplayRefresh &rArr; FL_LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RF
</UL>

<P><STRONG><a name="[81]"></a>ShowTemper</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, display.o(i.ShowTemper))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowTemper &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDotPx
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToUint6410Rate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ShowUserCtrlDevData</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, display.o(i.ShowUserCtrlDevData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowUserCtrlDevData &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDotPx
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ShowUserEnableFlag</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, display.o(i.ShowUserEnableFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowUserEnableFlag &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ShowValvePart</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, display.o(i.ShowValvePart))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowValvePart &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDotPx
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHomePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ShowVerNum</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, display.o(i.ShowVerNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ShowVerNum &rArr; anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[260]"></a>ShowWait</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, display.o(i.ShowWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ShowWait &rArr; ClearDisplayAll &rArr; LcdDisplayRefresh &rArr; FL_LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Num_Data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDisplayAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>StartOPenDevMode</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, define.o(i.StartOPenDevMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = StartOPenDevMode &rArr; RTC_SetRTC &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_IWDT_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime_EEprom
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(RESET)
</UL>
<P><STRONG><a name="[266]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lc0xx.o(.text)
</UL>
<P><STRONG><a name="[268]"></a>TEMP_CAL</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, pt1000.o(i.TEMP_CAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TEMP_CAL &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[26a]"></a>TEST_GP21_Temp</STRONG> (Thumb, 418 bytes, Stack size 88 bytes, pt1000.o(i.TEST_GP21_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TEST_GP21_Temp &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Status
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Get_Data32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
</UL>

<P><STRONG><a name="[26d]"></a>Task_WriteNowRTCTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, taskeeprom.o(i.Task_WriteNowRTCTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Task_WriteNowRTCTime &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEpromTimerCallback
</UL>

<P><STRONG><a name="[26e]"></a>Task_WriteValveRunTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, taskeeprom.o(i.Task_WriteValveRunTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Task_WriteValveRunTime &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEpromTimerCallback
</UL>

<P><STRONG><a name="[4c]"></a>Test433AlarmTask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, taskabouttimer.o(i.Test433AlarmTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Test433AlarmTask &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> taskabouttimer.o(i.TimeTask)
<LI> rf_cmt2300a_receive.o(i.CMT2300A_RECEIVE_DATA)
</UL>
<P><STRONG><a name="[26f]"></a>TestSystemAlarm</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, taskabouttimer.o(i.TestSystemAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TestSystemAlarm &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[270]"></a>TestValveAutoSub</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, taskabouttimer.o(i.TestValveAutoSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TestValveAutoSub &rArr; ValveCtrlStart &rArr; isRunningForValve &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[271]"></a>Test_BatVoltge</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.Test_BatVoltge))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_BatVoltge &rArr; GetBatVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[53]"></a>Test_Exter_Power</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, taskabouttimer.o(i.Test_Exter_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Test_Exter_Power &rArr; CMT2300A_RF_OPEN &rArr; RF_Init &rArr; CMT2300A_Init &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_CLOSE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskabouttimer.o(i.TimeTask)
</UL>
<P><STRONG><a name="[272]"></a>Test_PT1000</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, pt1000.o(i.Test_PT1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Test_PT1000 &rArr; TEST_GP21_Temp &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quicksort
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMP_CAL
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Low_Pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
</UL>

<P><STRONG><a name="[274]"></a>Test_Temperature</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, adc.o(i.Test_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Test_Temperature &rArr; GetTemper_NTC &rArr; Get_Temper_value &rArr; GetTempVoltage &rArr; GetSingleChannelVoltage_POLL &rArr; GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temper_Battery_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemper_NTC
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[275]"></a>Test_ValueDegree</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, adc.o(i.Test_ValueDegree))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Test_ValueDegree &rArr; GetMotorDegree &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
</UL>

<P><STRONG><a name="[5b]"></a>TimeTask</STRONG> (Thumb, 788 bytes, Stack size 88 bytes, taskabouttimer.o(i.TimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = TimeTask &rArr; getTimeNumber_UTCByRTCTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeNumber_UTCByRTCTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ValueDegree
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_BatVoltge
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValveAutoSub
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSystemAlarm
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveByT2AutoSub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_CLOSE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[25e]"></a>TimestampToRTCData</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, display.o(i.TimestampToRTCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimestampToRTCData
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNowLimitTime
</UL>

<P><STRONG><a name="[1fe]"></a>U8_Connect_U8</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, numberbaselib.o(i.U8_Connect_U8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = U8_Connect_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeiteCmdSubData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[200]"></a>UpData_Receive_Hex</STRONG> (Thumb, 404 bytes, Stack size 1088 bytes, updata.o(i.UpData_Receive_Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = UpData_Receive_Hex &rArr; SaveUpdataToPage8Buff &rArr; writeUpdataBuffDataToFlash &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeUpdataBuffDataToFlash
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataWriteSign
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeNeedPage
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCIIToHEX2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[11a]"></a>ValveCtrlStart</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, task_valve.o(i.ValveCtrlStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ValveCtrlStart &rArr; isRunningForValve &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunningForValve
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestValveAutoSub
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveByT2AutoSub
</UL>

<P><STRONG><a name="[5d]"></a>ValveCtrlTask</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, task_valve.o(i.ValveCtrlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ValveCtrlTask &rArr; Valve_SetDegree &rArr; Test_ValueDegree &rArr; GetMotorDegree &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunningForValve
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Valve_RunFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[27b]"></a>Valve_SetDegree</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, motorctrldev.o(i.Valve_SetDegree))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Valve_SetDegree &rArr; Test_ValueDegree &rArr; GetMotorDegree &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ValueDegree
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOpenPage
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowClosePage
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlTask
</UL>

<P><STRONG><a name="[184]"></a>WeiteCmdSubData</STRONG> (Thumb, 854 bytes, Stack size 64 bytes, define.o(i.WeiteCmdSubData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WeiteCmdSubData &rArr; RTC_SetRTC &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8_Connect_U8
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffToFloatOrDouble
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoingCmdSub
</UL>

<P><STRONG><a name="[59]"></a>WriteEEprom</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, taskeeprom.o(i.WriteEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WriteEEprom &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunEEprom
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EEprom_RunFlag
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRunTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[55]"></a>WriteEEpromTimerCallback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, taskeeprom.o(i.WriteEEpromTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteEEpromTimerCallback &rArr; Task_WriteValveRunTime &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_WriteValveRunTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_WriteNowRTCTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskeeprom.o(i.WriteEEprom)
</UL>
<P><STRONG><a name="[27d]"></a>WriteRunTime</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, taskeeprom.o(i.WriteRunTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WriteRunTime &rArr; EEprom_AT24C0XXData_Write &rArr; EEprom_Write_Start &rArr; EEprom_Byte1Write &rArr; EEprom_Byte1Read &rArr; EEprom_Byte1Read_No_Check &rArr; IIC_SendByte &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Start
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Read_Start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
</UL>

<P><STRONG><a name="[17a]"></a>XTLF_Config_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, check_xthf_or_xtlf.o(i.XTLF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XTLF_Config_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
</UL>

<P><STRONG><a name="[19]"></a>_EC20_ReBoot_In_RTC_By_1Second</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtc.o(i._EC20_ReBoot_In_RTC_By_1Second))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>_RTC_ReBoot_Check</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtc.o(i._RTC_ReBoot_Check))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, strlib.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[108]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART0_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDotPx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RF_OPEN
</UL>

<P><STRONG><a name="[27e]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[280]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[f8]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[281]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[fe]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[237]"></a>_getKeyName</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, jsondataanalyzelib.o(i._getKeyName))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _getKeyName &rArr; catString
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catString
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_isJsonNull
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getDouble
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getBool
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
</UL>

<P><STRONG><a name="[56]"></a>_getStrlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strlib.o(i._getStrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _getStrlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strlib.o(i._strnewInit)
</UL>
<P><STRONG><a name="[b4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[102]"></a>_strnewInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strlib.o(i._strnewInit))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCIIToHEX2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[256]"></a>addHex_FF_ToBuff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, updata.o(i.addHex_FF_ToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addHex_FF_ToBuff &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
</UL>

<P><STRONG><a name="[287]"></a>anyArrayToSameBaseNumber</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, numberbaselib.o(i.anyArrayToSameBaseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = anyArrayToSameBaseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseArrayToAnyBaseNumber
</UL>

<P><STRONG><a name="[286]"></a>anyBaseArrayToAnyBaseNumber</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, numberbaselib.o(i.anyBaseArrayToAnyBaseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = anyBaseArrayToAnyBaseNumber &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyArrayToSameBaseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doneAsciiStrToAnyBaseNumberData
</UL>

<P><STRONG><a name="[25a]"></a>anyBaseNumberToAnyBaseArray</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, numberbaselib.o(i.anyBaseNumberToAnyBaseArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = anyBaseNumberToAnyBaseArray &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToSameArray
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVerNum
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowValvePart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUserEnableFlag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowUserCtrlDevData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTemper
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFrontValveCtrlUser
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrerCode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowBatV
</UL>

<P><STRONG><a name="[289]"></a>anyBaseNumberToSameArray</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, numberbaselib.o(i.anyBaseNumberToSameArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = anyBaseNumberToSameArray &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shortChStrToDoubleChStr
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
</UL>

<P><STRONG><a name="[288]"></a>anyBaseToAnyBase</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, numberbaselib.o(i.anyBaseToAnyBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseArrayToAnyBaseNumber
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
</UL>

<P><STRONG><a name="[23a]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getDouble
</UL>

<P><STRONG><a name="[213]"></a>background</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, display.o(i.background))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = background &rArr; SetErrerCode &rArr; setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHomePage
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOpenPage
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowClosePage
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MenuPage_Change
</UL>

<P><STRONG><a name="[126]"></a>catString</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, strlib.o(i.catString))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = catString
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getKeyName
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_getArray
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[24d]"></a>checkTimeFrom</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, at24cxxdataloader.o(i.checkTimeFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = checkTimeFrom &rArr; Check_Date_ByHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Time_ByHEX
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Date_ByHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[4a]"></a>closeLightOrM1</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, taskallreceive.o(i.closeLightOrM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = closeLightOrM1 &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskallreceive.o(i.AllReceive)
</UL>
<P><STRONG><a name="[125]"></a>copyString</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strlib.o(i.copyString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copyString
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToAnyBaseArray
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
</UL>

<P><STRONG><a name="[23b]"></a>doneAsciiStrToAnyBaseNumberData</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, numberbaselib.o(i.doneAsciiStrToAnyBaseNumberData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = doneAsciiStrToAnyBaseNumberData &rArr; anyBaseArrayToAnyBaseNumber &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strArrayToNumberArray
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseArrayToAnyBaseNumber
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getInt
</UL>

<P><STRONG><a name="[104]"></a>doubleChStrToShortChStr</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, numberbaselib.o(i.doubleChStrToShortChStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = doubleChStrToShortChStr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCIIToHEX2
</UL>

<P><STRONG><a name="[2be]"></a>flash_read_page</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, updata.o(i.flash_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashDataToUpdataBuff
</UL>

<P><STRONG><a name="[28d]"></a>flash_write_page</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, updata.o(i.flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashCheckReadPageData
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeUpdataBuffDataToFlash
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataWriteSign
</UL>

<P><STRONG><a name="[10d]"></a>floatToUint6410Rate</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, define.o(i.floatToUint6410Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = floatToUint6410Rate &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTemper
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HY_DataClass
</UL>

<P><STRONG><a name="[282]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[106]"></a>getDayOfWeek</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, rtc.o(i.getDayOfWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLoader_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>getDoubleChrOnString</STRONG> (Thumb, 90 bytes, Stack size 124 bytes, jsondataanalyzelib.o(i.getDoubleChrOnString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = getDoubleChrOnString &rArr; pop
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmpty
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStack
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
</UL>

<P><STRONG><a name="[17e]"></a>getPartOfSetPointOnRing</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, numberbaselib.o(i.getPartOfSetPointOnRing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getPartOfSetPointOnRing
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveByT2AutoSub
</UL>

<P><STRONG><a name="[28b]"></a>getStrNowDataAndTimeByRTC</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rtc.o(i.getStrNowDataAndTimeByRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = getStrNowDataAndTimeByRTC &rArr; getStrUserTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_GetTime
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrUserTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
</UL>

<P><STRONG><a name="[290]"></a>getStrUserTime</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, rtc.o(i.getStrUserTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = getStrUserTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
</UL>

<P><STRONG><a name="[21d]"></a>getTimeNumber_UTCByRTCTime</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, strlib.o(i.getTimeNumber_UTCByRTCTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = getTimeNumber_UTCByRTCTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNowLimitTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitCard
</UL>

<P><STRONG><a name="[201]"></a>get_CheckSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, publiclib_no_one.o(i.get_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[120]"></a>initStack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jsondataanalyzelib.o(i.initStack))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoubleChrOnString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_sizeItemNum
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
</UL>

<P><STRONG><a name="[24f]"></a>init_EEprom_RunFlag</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, taskeeprom.o(i.init_EEprom_RunFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_EEprom_RunFlag &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
</UL>

<P><STRONG><a name="[27a]"></a>init_Valve_RunFlag</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, task_valve.o(i.init_Valve_RunFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_Valve_RunFlag &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlTask
</UL>

<P><STRONG><a name="[122]"></a>isEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jsondataanalyzelib.o(i.isEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoubleChrOnString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_sizeItemNum
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
</UL>

<P><STRONG><a name="[11c]"></a>isReceiveData</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rf_cmt2300a_receive.o(i.isReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = isReceiveData &rArr; CMT2300A_GoStby &rArr; CMT2300A_AutoSwitchStatus &rArr; CMT2300A_GetChipStatus &rArr; CMT2300A_ReadReg &rArr; CMT_SPI_Read &rArr; CMT_SPI_Send &rArr; FL_DelayUs &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ReadFifo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoStby
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GoRx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearRxFifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_ClearInterruptFlags
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_RECEIVE_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[250]"></a>isRunEEprom</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, taskeeprom.o(i.isRunEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = isRunEEprom &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
</UL>

<P><STRONG><a name="[279]"></a>isRunningForValve</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, task_valve.o(i.isRunningForValve))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isRunningForValve &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlTask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
</UL>

<P><STRONG><a name="[285]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[a1]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; StartOPenDevMode &rArr; RTC_SetRTC &rArr; getDayOfWeek &rArr; anyBaseToAnyBase &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNetArgumentInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXXLoader_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24CXX_Parameter_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWait
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOPenDevMode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMeterNum
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[296]"></a>myStrstr</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, strlib.o(i.myStrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = myStrstr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myStrstrCont
</UL>

<P><STRONG><a name="[121]"></a>myStrstrCont</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, strlib.o(i.myStrstrCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = myStrstrCont &rArr; myStrstr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myStrstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_sizeItemNum
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
</UL>

<P><STRONG><a name="[236]"></a>newJsonArrayByString</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, jsondataanalyzelib.o(i.newJsonArrayByString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = newJsonArrayByString
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getArray
</UL>

<P><STRONG><a name="[1ff]"></a>newJsonObjectByString</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, jsondataanalyzelib.o(i.newJsonObjectByString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = newJsonObjectByString
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Obj_getObject
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_USB_TTL_CheckBuff
</UL>

<P><STRONG><a name="[124]"></a>pop</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, jsondataanalyzelib.o(i.pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pop
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoubleChrOnString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_sizeItemNum
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
</UL>

<P><STRONG><a name="[123]"></a>push</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jsondataanalyzelib.o(i.push))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDoubleChrOnString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_sizeItemNum
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arr_get
</UL>

<P><STRONG><a name="[2bb]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2ac]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[273]"></a>quicksort</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, pt1000.o(i.quicksort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = quicksort &rArr;  quicksort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quicksort
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_PT1000
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quicksort
</UL>

<P><STRONG><a name="[110]"></a>readDataBit</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, numberbaselib.o(i.readDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = readDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Temper_Battery_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ValueDegree
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowValvePart
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Exter_Power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSystemAlarm
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_WriteValveRunTime
</UL>

<P><STRONG><a name="[254]"></a>readFlashDataToUpdataBuff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, updata.o(i.readFlashDataToUpdataBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readFlashDataToUpdataBuff &rArr; flash_read_page
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
</UL>

<P><STRONG><a name="[1fb]"></a>setDataBit</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, numberbaselib.o(i.setDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setDataBit &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrerCode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
</UL>

<P><STRONG><a name="[293]"></a>setNetArgumentInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at24cxxdataloader.o(i.setNetArgumentInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setNetArgumentInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[259]"></a>setRtcDate</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, rtc.o(i.setRtcDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDayOfWeek
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseToAnyBase
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_AT24C0XXData_Write
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCtimeCard
</UL>

<P><STRONG><a name="[25d]"></a>shortChStrToDoubleChStr</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, numberbaselib.o(i.shortChStrToDoubleChStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = shortChStrToDoubleChStr &rArr; anyBaseNumberToSameArray &rArr; swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToSameArray
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMeterID
</UL>

<P><STRONG><a name="[54]"></a>startTimeTask</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, taskabouttimer.o(i.startTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = startTimeTask &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDataBit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskabouttimer.o(i.TimeTask)
</UL>
<P><STRONG><a name="[103]"></a>strArrayToNumberArray</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, numberbaselib.o(i.strArrayToNumberArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strArrayToNumberArray
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCIIToHEX2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doneAsciiStrToAnyBaseNumberData
</UL>

<P><STRONG><a name="[2bf]"></a>swapChr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, strlib.o(i.swapChr))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapStr
</UL>

<P><STRONG><a name="[133]"></a>swapStr</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, strlib.o(i.swapStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = swapStr
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapChr
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shortChStrToDoubleChStr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseNumberToSameArray
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyBaseArrayToAnyBaseNumber
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleOrFloatToBuff
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffToFloatOrDouble
</UL>

<P><STRONG><a name="[277]"></a>updataInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, updata.o(i.updataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = updataInit &rArr; updataWriteSign &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataWriteSign
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
</UL>

<P><STRONG><a name="[2c0]"></a>updataReadSign</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, updata.o(i.updataReadSign))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataWriteSign
</UL>

<P><STRONG><a name="[276]"></a>updataWriteSign</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, updata.o(i.updataWriteSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = updataWriteSign &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataReadSign
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
</UL>

<P><STRONG><a name="[298]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[2a7]"></a>vApplicationIdleHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2a1]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[2ab]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[29a]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[299]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[29c]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[29e]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2a6]"></a>vPortFree</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[29f]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2b5]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[11f]"></a>vTaskDelay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunningForValve
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunEEprom
</UL>

<P><STRONG><a name="[2ba]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2c2]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2c1]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2c8]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[295]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>

<P><STRONG><a name="[a7]"></a>vTaskSwitchContext</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[253]"></a>writeUpdataBuffDataToFlash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, updata.o(i.writeUpdataBuffDataToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = writeUpdataBuffDataToFlash &rArr; flash_write_page &rArr; FL_FLASH_Program_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_Receive_Hex
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUpdataToPage8Buff
</UL>

<P><STRONG><a name="[1f7]"></a>xEventGroupClearBits</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEpromTimerCallback
</UL>

<P><STRONG><a name="[1f5]"></a>xEventGroupCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
</UL>

<P><STRONG><a name="[1fa]"></a>xEventGroupSetBits</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Exter_Power
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoExtrenPowerAndOpenValve
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_WriteValveRunTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_WriteNowRTCTime
</UL>

<P><STRONG><a name="[2c4]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[113]"></a>xQueueGenericCreate</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlTask
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Valve_RunFlag
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EEprom_RunFlag
</UL>

<P><STRONG><a name="[114]"></a>xQueueGenericReceive</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlTask
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunningForValve
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isRunEEprom
</UL>

<P><STRONG><a name="[2a9]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1fc]"></a>xQueueGenericSend</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLightOrM1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveCtrlStart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimeTask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoExtrenPowerAndOpenValve
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Valve_RunFlag
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EEprom_RunFlag
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEpromTimerCallback
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEpromTimerCallback
</UL>

<P><STRONG><a name="[2ca]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[21a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart0CheckBuff
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReciveData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test433AlarmTask
</UL>

<P><STRONG><a name="[2c9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[294]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cd]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1f9]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
</UL>

<P><STRONG><a name="[1da]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[264]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2b9]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2c5]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[19d]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>

<P><STRONG><a name="[21b]"></a>xTaskResumeFromISR</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskResumeFromISR &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart0CheckBuff
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReciveData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test433AlarmTask
</UL>

<P><STRONG><a name="[10f]"></a>xTimerCreate</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
</UL>

<P><STRONG><a name="[2c3]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1db]"></a>xTimerGenericCommand</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEprom
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEprom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLightOrM1
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTaskTimerCallback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>xTimerIsTimerActive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllReceive
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
</UL>

<P><STRONG><a name="[9b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[49]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[283]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2ce]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2cf]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[320]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[2d0]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveByT2AutoSub
</UL>

<P><STRONG><a name="[2d2]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Temperature
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlValveByT2AutoSub
</UL>

<P><STRONG><a name="[2d3]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
</UL>

<P><STRONG><a name="[2d4]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemper_NTC
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDegree
</UL>

<P><STRONG><a name="[2d5]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[2d7]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[db]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[f7]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f6]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2bc]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2bd]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2c6]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6a]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2a4]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2a5]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2a8]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2af]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2b0]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2b8]"></a>prvUnlockQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[297]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[29b]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2a2]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2a3]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6b]"></a>prvIdleTask</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2aa]"></a>prvInitialiseNewTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[29d]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2cb]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2cc]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[2a0]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2b7]"></a>prvGetNextExpireTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2ad]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[2ae]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[2b1]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2b2]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2b4]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2b3]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2b6]"></a>prvSwitchTimerLists</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[6c]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1c8]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fm33lc0xx_fl.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[19f]"></a>FL_GPIO_ClearFlag_EXTI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_ClearFlag_EXTI))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[19e]"></a>FL_GPIO_DisableDigitalFilter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_DisableDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[70]"></a>FL_GPIO_SetExtiLine0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine0))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>FL_GPIO_SetExtiLine1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine1))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>FL_GPIO_SetExtiLine10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine10))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>FL_GPIO_SetExtiLine11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine11))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>FL_GPIO_SetExtiLine12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine12))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>FL_GPIO_SetExtiLine13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine13))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>FL_GPIO_SetExtiLine14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine14))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>FL_GPIO_SetExtiLine2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine2))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>FL_GPIO_SetExtiLine3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine3))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>FL_GPIO_SetExtiLine4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine4))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>FL_GPIO_SetExtiLine5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine5))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>FL_GPIO_SetExtiLine6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine6))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>FL_GPIO_SetExtiLine7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine7))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>FL_GPIO_SetExtiLine8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine8))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>FL_GPIO_SetExtiLine9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetExtiLine9))
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>FL_GPIO_SetTriggerEdge</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lc0xx_fl_exti.o(i.FL_GPIO_SetTriggerEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetTriggerEdge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lc0xx_fl_exti.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>FL_FLASH_ClearFlag_EraseComplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_ClearFlag_EraseComplete))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a5]"></a>FL_FLASH_EnableErase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_EnableErase))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1b2]"></a>FL_FLASH_EnableProgram</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_EnableProgram))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
</UL>

<P><STRONG><a name="[1a2]"></a>FL_FLASH_GetFlashLockStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_GetFlashLockStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1ac]"></a>FL_FLASH_IsActiveFlag_AuthenticationError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_AuthenticationError))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1aa]"></a>FL_FLASH_IsActiveFlag_ClockError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_ClockError))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1ad]"></a>FL_FLASH_IsActiveFlag_EraseComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_EraseComplete))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1ab]"></a>FL_FLASH_IsActiveFlag_KeyError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_KeyError))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1b3]"></a>FL_FLASH_IsActiveFlag_ProgramComplete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_ProgramComplete))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
</UL>

<P><STRONG><a name="[1ae]"></a>FL_FLASH_LockFlash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_LockFlash))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a4]"></a>FL_FLASH_SetFlashEraseType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_SetFlashEraseType))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a7]"></a>FL_FLASH_UnlockFlash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_FLASH_UnlockFlash))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1b0]"></a>FL_RCC_DisableGroup2BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_RCC_DisableGroup2BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1af]"></a>FL_RCC_DisableGroup2OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_RCC_DisableGroup2OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a1]"></a>FL_RCC_EnableGroup2BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_RCC_EnableGroup2BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a3]"></a>FL_RCC_EnableGroup2OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.FL_RCC_EnableGroup2OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a6]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1a8]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lc0xx_fl_flash.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Page
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[1b7]"></a>FL_GPIO_DisablePinAnalogSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinAnalogSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[1b4]"></a>FL_GPIO_DisablePinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinInput))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[1b6]"></a>FL_GPIO_DisablePinOpenDrain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinOpenDrain))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[1b5]"></a>FL_GPIO_DisablePinPullup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinPullup))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[1b8]"></a>FL_GPIO_DisablePinRemap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_DisablePinRemap))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[1b9]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lc0xx_fl_gpio.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[1c6]"></a>FL_RCC_EnableGroup1OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lpuart.o(i.FL_RCC_EnableGroup1OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART0_Init
</UL>

<P><STRONG><a name="[1c5]"></a>FL_RCC_EnableGroup3BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lc0xx_fl_lpuart.o(i.FL_RCC_EnableGroup3BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART0_Init
</UL>

<P><STRONG><a name="[1c7]"></a>FL_RCC_RCMF_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lc0xx_fl_lpuart.o(i.FL_RCC_RCMF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART0_Init
</UL>

<P><STRONG><a name="[1bc]"></a>FL_LCD_DisplayFreq</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, fm33lc0xx_fl_lcd.o(i.FL_LCD_DisplayFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FL_LCD_DisplayFreq &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_GetCOMNumber
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_Init
</UL>

<P><STRONG><a name="[1c1]"></a>FL_LCD_FlickTime</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, fm33lc0xx_fl_lcd.o(i.FL_LCD_FlickTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FL_LCD_FlickTime &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_GetCOMNumber
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_Init
</UL>

<P><STRONG><a name="[1bd]"></a>FL_LCD_GetCOMNumber</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lc0xx_fl_lcd.o(i.FL_LCD_GetCOMNumber))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_FlickTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LCD_DisplayFreq
</UL>

<P><STRONG><a name="[267]"></a>SystemPLLClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, system_fm33lc0xx.o(i.SystemPLLClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemPLLClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[22d]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mf_config.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
</UL>

<P><STRONG><a name="[215]"></a>FL_FDET_DisableIT_XTLFFail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_FDET_DisableIT_XTLFFail))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>FL_FDET_IsActiveFlag_XTLFFail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_FDET_IsActiveFlag_XTLFFail))
<BR>[Address Reference Count : 1]<UL><LI> check_xthf_or_xtlf.o(i.check_XTClock_isOk)
</UL>
<P><STRONG><a name="[216]"></a>FL_RCC_SetLSCLKClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, check_xthf_or_xtlf.o(i.FL_RCC_SetLSCLKClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_XTClock_isOk
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFDET_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>check_XTClock_isOk</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, check_xthf_or_xtlf.o(i.check_XTClock_isOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = check_XTClock_isOk &rArr; setRtcDate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetLSCLKClockSource
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FDET_DisableIT_XTLFFail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStrNowDataAndTimeByRTC
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Str_Obj
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTC_1S_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTLF_Config_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_XTHF_And_XTLF
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> check_xthf_or_xtlf.o(i.LFDET_IRQHandler)
<LI> check_xthf_or_xtlf.o(i.check_XTClock_isOk)
</UL>
<P><STRONG><a name="[11]"></a>_MinInitRTCTask</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, min_settime.o(i._MinInitRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _MinInitRTCTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> min_settime.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>_MinRTCCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, min_settime.o(i._MinRTCCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _MinRTCCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> min_settime.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_Min_15_InitRTCTask</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, min_settime.o(i._Min_15_InitRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Min_15_InitRTCTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> min_settime.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>_Min_15_RTCCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, min_settime.o(i._Min_15_RTCCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Min_15_RTCCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> min_settime.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>_InitRTCTask</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rtc_settime.o(i._InitRTCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _InitRTCTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_settime.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_RTCCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc_settime.o(i._RTCCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RTCCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_settime.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>_InitSetTimeTask</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, settime.o(i._InitSetTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _InitSetTimeTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_SetCloseTask</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, settime.o(i._SetCloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetCloseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settime.o(.data)
</UL>
<P><STRONG><a name="[28e]"></a>flashCheckReadPageData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, updata.o(i.flashCheckReadPageData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flashCheckReadPageData
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>

<P><STRONG><a name="[1e1]"></a>FL_ADC_ClearFlag_EndOfConversion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_ClearFlag_EndOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1e5]"></a>FL_ADC_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1df]"></a>FL_ADC_DisableSequencerChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_DisableSequencerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1e2]"></a>FL_ADC_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1e3]"></a>FL_ADC_EnableSWConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_EnableSWConversion))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1e0]"></a>FL_ADC_EnableSequencerChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_EnableSequencerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1e4]"></a>FL_ADC_IsActiveFlag_EndOfConversion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.FL_ADC_IsActiveFlag_EndOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[131]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ValueDegree
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temper_value
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_ON
</UL>

<P><STRONG><a name="[12f]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Temper_value
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battary_GND_OFF
</UL>

<P><STRONG><a name="[1de]"></a>FL_RCC_SetADCPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.FL_RCC_SetADCPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAVREFSample_POLL
</UL>

<P><STRONG><a name="[1ec]"></a>FL_SVD_DisableADCMonitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_SVD_DisableADCMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[1e8]"></a>FL_SVD_EnableADCMonitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.FL_SVD_EnableADCMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[1eb]"></a>FL_VREF_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_VREF_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[1e7]"></a>FL_VREF_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_VREF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempVoltage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVoltage
</UL>

<P><STRONG><a name="[1dd]"></a>GetAVREFSample_POLL</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, adc.o(i.GetAVREFSample_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetAVREFSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetADCPrescaler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsActiveFlag_EndOfConversion
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSWConversion
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableSequencerChannel
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ClearFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
</UL>

<P><STRONG><a name="[1f1]"></a>GetSingleChannelSample_POLL</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, adc.o(i.GetSingleChannelSample_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSingleChannelSample_POLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RCC_SetADCPrescaler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsActiveFlag_EndOfConversion
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSWConversion
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableSequencerChannel
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ClearFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelVoltage_POLL
</UL>

<P><STRONG><a name="[199]"></a>EEprom_SDA_IN</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEprom_SDA_IN &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[19a]"></a>EEprom_SDA_OUT</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, at24c02.o(i.EEprom_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEprom_SDA_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[206]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c02.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
</UL>

<P><STRONG><a name="[19b]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c02.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_I2C_MASTER_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendNoAck
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RevByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Check_Ack
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_SDA_OUT
</UL>

<P><STRONG><a name="[12a]"></a>FL_BSTIM32_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bstim.o(i.FL_BSTIM32_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_BSTIM32_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM32_Setup
</UL>

<P><STRONG><a name="[167]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmt2300a_spi.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Init
</UL>

<P><STRONG><a name="[166]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmt2300a_spi.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Init
</UL>

<P><STRONG><a name="[165]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, cmt2300a_spi.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write_fifo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_SPI_Init
</UL>

<P><STRONG><a name="[230]"></a>FL_LCD_EnableCOMEN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, display_lcd_lib.o(i.FL_LCD_EnableCOMEN))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
</UL>

<P><STRONG><a name="[231]"></a>FL_LCD_EnableSEGEN0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display_lcd_lib.o(i.FL_LCD_EnableSEGEN0))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LCD_Init
</UL>

<P><STRONG><a name="[21c]"></a>FL_LCD_WriteData</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, display_lcd_lib.o(i.FL_LCD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_LCD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRefresh
</UL>

<P><STRONG><a name="[1cf]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gp21.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg16
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Low_Pwr
</UL>

<P><STRONG><a name="[1ce]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gp21.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Write_Reg16
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Spi_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Read_Reg16
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Realy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP21_Goto_Low_Pwr
</UL>

<P><STRONG><a name="[232]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motorctrldev.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Motor_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
</UL>

<P><STRONG><a name="[27c]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motorctrldev.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_SetDegree
</UL>

<P><STRONG><a name="[26b]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt1000.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[26c]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt1000.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GP21_Temp
</UL>

<P><STRONG><a name="[145]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_cmt2300a_init.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_OFF
</UL>

<P><STRONG><a name="[144]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_cmt2300a_init.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_ON
</UL>

<P><STRONG><a name="[155]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, rf_cmt2300a_init.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_ON
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT2300A_PWR_OFF
</UL>

<P><STRONG><a name="[247]"></a>RTC_GetRTC</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, rtc.o(i.RTC_GetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_GetRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTC_GetTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRtcDate
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si522a_interface.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SI522A_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SI522
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[205]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si522a_interface.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SI522A_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SI522
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[209]"></a>SDA_IN</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, si522a_interface.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_IN &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[204]"></a>SDA_OUT</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, si522a_interface.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_OUT &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop_SI522
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start_SI522
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[28c]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, taskallreceive.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLightOrM1
</UL>

<P><STRONG><a name="[23c]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, taskallreceive.o(i.FL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUartOfLightOrM1
</UL>

<P><STRONG><a name="[1d9]"></a>FL_GPIO_ClearFlag_EXTI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, taskgpioinit.o(i.FL_GPIO_ClearFlag_EXTI))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[1d8]"></a>FL_GPIO_IsActiveFlag_EXTI</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, taskgpioinit.o(i.FL_GPIO_IsActiveFlag_EXTI))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c2]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2d6]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[2d1]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[46]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[ea]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ed]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f4]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[f9]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e1]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e3]"></a>_scanf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e4]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e5]"></a>_scanf_wctomb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e2]"></a>_scanf_wstring</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
